unit TestuHTMLWriter;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, SysUtils, uHTMLWriter, HTMLWriterUtils, HTMLWriterIntf, Dialogs;

type
  TTestCode = reference to procedure;
  TClassOfException = class of Exception;

type
  // Test methods for class THTMLWriter

  TestTHTMLWriter = class(TTestCase)
  strict private
    function HTMLWriterFactory(aTagName: string): IHTMLWriter;
    function HTML(aString: string): string;

  protected
    procedure CheckException(aExceptionType: TClassOfException; aCode: TTestCode; const aMessage: String);
    procedure CheckExceptionNotRaised(aExceptionType: TClassOfException; aCode: TTestCode; const aMessage: String);

  public
    procedure SetUp; override;
    procedure TearDown; override;

  published
    procedure TestDefinitionListStuff;
    procedure TestArea;
    procedure TestOpenTableHeader;
    procedure TestThatExceptionsAreRaised;

    procedure TestOpenCol;
    procedure TestOpenColGroup;
    procedure TestCaption;

    procedure TestOpenOption;
    procedure TestOpenOptGroup;
    procedure TestOpenTextArea;
    procedure TestOpenSelect;

    procedure TestCloseComment;
    procedure TestCloseComment1;
    procedure TestOpenComment;
    procedure TestAddComment;

    procedure TestOpenBold;

    procedure TestLabel;
    procedure TestDeprecated;

    procedure TestNewAtttributes;
    procedure TestButton;
    procedure TestInput;

    procedure TestOpenObject;
    procedure TestOpenParam;
    procedure TestCRLFIndent;
    procedure TestNoFrames;
    procedure TestArbitraryTag;
    procedure TestNoScript;
    procedure TestAddLink;
    procedure TestAddInsertText;
    procedure TestOpenInsert;
    procedure TestBaseFont;
    procedure TestMap;

    procedure TestFrameset;
    procedure TestFrame;
    procedure TestAddTitle;
    procedure TestTHTMLWidth1;
    procedure TestTHTMLWidth2;
    procedure TestAddBase;
    procedure TestNonHTMLTag;
    procedure TestCreateDocument;

    procedure TestFieldSetAndLegend;

    procedure TestOpenForm;
    procedure TestOpenIFrame;
    procedure TestAddIFrame;

    procedure TestAddAcronymText;
    procedure TestAddAbbreviationText;
    procedure TestAddAddressText;
    procedure TestAddBDOText;
    procedure TestAddBigText;
    procedure TestAddCenterText;
    procedure TestAddCodeText;
    procedure TestAddDeleteText;
    procedure TestAddDefinitionText;
    procedure TestAddFontText;
    procedure TestAddKeyboardText;
    procedure TestAddQuotationText;
    procedure TestAddSampleText;
    procedure TestAddSmallText;
    procedure TestAddStrikeText;
    procedure TestAddTeletypeText;
    procedure TestAddVariableText;

    procedure TestOpenAcronym;
    procedure TestOpenAbbreviation;
    procedure TestOpenAddress;
    procedure TestOpenBDO;
    procedure TestOpenBig;
    procedure TestOpenCenter;
    procedure TestOpenCode;
    procedure TestOpenDelete;
    procedure TestOpenDefinition;
    procedure TestOpenFont;
    procedure TestOpenKeyboard;
    procedure TestOpenQuotation;
    procedure TestOpenSample;
    procedure TestOpenSmall;
    procedure TestOpenStrike;
    procedure TestOpenTeletype;
    procedure TestOpenVariable;

    procedure TestLoadSave;
    procedure TestOpenScript;
    procedure TestAddScript;
    procedure TestConstructorException;

    procedure TestAddTableData;
    procedure TestTableHead;
    procedure TestTableBody;
    procedure TestTableFoot;

    procedure TestAddLineBreak;
    procedure TestOpenListItem;
    procedure TestAddListItem;
    procedure TestAddHardRule;
    procedure TestAddSpanTextWithStyle;
    procedure TestAddDivTextWithStyle;
    procedure TestAddSpanTextWithID;
    procedure TestAddSpanTextWithClass;
    procedure TestAddDivTextWithID;
    procedure TestAddDivTextWithClass;
    procedure TestAddMetaNamedContent;

    procedure TestAsHTML;
    procedure TestAddText;
    procedure TestAddHead;
    procedure TestOpenTitle;

    procedure TestOpenBody;
    procedure TestOpenTable;
    procedure TestOpenTableRow;
    procedure TestOpenTableData;

    procedure TestOpenImage;
    procedure TestAddImage;
    procedure TestOpenMeta;
    procedure TestOpenAnchor;
    procedure TestAddAnchor;
    procedure TestOpenParagraph;
    procedure TestOpenParagraphWithStyle;
    procedure TestOpenParagraphWithID;
    procedure TestAddParagraphTextWithStyle;
    procedure TestAddParagraphTextWithID;
    procedure TestAddParagraphTextWithClass;
    procedure TestOpenSpan;
    procedure TestOpenDiv;
    procedure TestOpenBlockQuote;
    procedure TestOpenUnorderedList;
    procedure TestOpenOrderedList;
    procedure TestAddParagraphText;
    procedure TestAddSpanText;
    procedure TestAddDivText;
    procedure TestAddBlockQuoteText;

    procedure TestOpenItalic;
    procedure TestOpenUnderline;
    procedure TestOpenEmphasis;
    procedure TestOpenStrong;
    procedure TestOpenPre;
    procedure TestOpenCite;
    procedure TestAddBoldText;
    procedure TestAddItalicText;
    procedure TestAddUnderlinedText;
    procedure TestAddEmphasisText;
    procedure TestAddStrongText;
    procedure TestAddPreformattedText;
    procedure TestAddCitationText;
    procedure TestOpenHeading1;
    procedure TestOpenHeading2;
    procedure TestOpenHeading3;
    procedure TestOpenHeading4;
    procedure TestOpenHeading5;
    procedure TestOpenHeading6;
    procedure TestAddHeading1Text;
    procedure TestAddHeading2Text;
    procedure TestAddHeading3Text;
    procedure TestAddHeading4Text;
    procedure TestAddHeading5Text;
    procedure TestAddHeading6Text;
    procedure TestAddStyle;
    procedure TestAddClass;
    procedure TestAddID;
    procedure TestAddAttribute;
    procedure TestCloseTag;
  end;
  // Test methods for class IGetHTML

  TestIGetHTML = class(TTestCase)
  strict private
    FIGetHTML: IGetHTML;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestAsHTML;
  end;

implementation

uses Windows, LoadSaveIntf;

procedure TestTHTMLWriter.SetUp;
begin

end;

procedure TestTHTMLWriter.TearDown;
begin

end;

procedure TestTHTMLWriter.TestAsHTML;
begin
  // This gets tested so much below, and it is so simple, that we don't
  // really need much testing here....

  CheckEquals('<html></html>', HTMLWriterFactory(cHTML).CloseTag.AsHTML);
end;

procedure TestTHTMLWriter.TestAddTeletypeText;
var
  TestResult, ExpectedResult: string;
  TempString: string;
  TempTag: string;
begin
  TempString := 'grundle';
  TempTag := TFormatTypeStrings[ftTeletype];

{$REGION 'MyRegion'}
    ExpectedResult := Format('<html><%s>%s</%s>', [TempTag, TempString, TempTag]);
    TestResult := HTMLWriterFactory(cHTML).AddTeletypeText(TempString).AsHTML;
    CheckEquals(ExpectedResult, TestResult);
  
    ExpectedResult := HTML(Format('<%s>%s</%s>', [TempTag, TempString, TempTag]));
    TestResult := HTMLWriterFactory(cHTML).AddTeletypeText(TempString).CloseTag.AsHTML;
    CheckEquals(ExpectedResult, TestResult);
{$ENDREGION}
end;

procedure TestTHTMLWriter.TestAddText;
var
  aString: string;
  ExpectedValue: string;
  Result: string;
  Temp: IHTMLWriter;
begin
  aString := 'this';
  ExpectedValue := HTML(aString); // '<html>this</html>';
  Temp := HTMLWriterFactory(cHTML);
  Temp.AddText(aString);
  Result := Temp.CloseTag.AsHTML;
  CheckEquals(ExpectedValue, Result);

  // arbitrary tags
  aString := 'this';
  ExpectedValue := Format('<%s>%s</%s>', [aString, aString, aString]);
  Temp := HTMLWriterFactory('this');
  Temp.AddText(aString);
  Result := Temp.CloseTag.AsHTML;
  CheckEquals(ExpectedValue, Result);

  // try adding text with brackets in it
  aString := '<groob>';
  ExpectedValue := HTML(aString);
  Temp := HTMLWriterFactory(cHTML);
  Temp.AddText(aString);
  Result := Temp.CloseTag.AsHTML;
  CheckEquals(ExpectedValue, Result);

end;

procedure TestTHTMLWriter.TestAddHardRule;
var
  TestResult: string;
  ExpectedResult: string;
begin
  ExpectedResult := HTML('<hr />');
  TestResult := HTMLWriterFactory(cHTML).AddHardRule.CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := HTML('<hr>');
  TestResult := HTMLWriterFactory(cHTML).AddHardRule('', ietIsNotEmptyTag).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := HTML('<hr clear="left" />');
  TestResult := HTMLWriterFactory(cHTML).AddHardRule('clear="left"', ietIsEmptyTag).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestAddHead;
var
  ExpectedValue: string;
  TestResult: string;
  Temp: IHTMLWriter;
begin
  Temp := HTMLWriterFactory(cHTML);
  ExpectedValue := HTML('<head></head>');
  // Multiple close tags should be fine
  TestResult := Temp.OpenHead.CloseTag.CloseTag.AsHTML;
  CheckEquals(ExpectedValue, TestResult);
end;

procedure TestTHTMLWriter.TestOpenBody;
var
  TestResult: string;
  ExpectedResult: string;
begin
  TestResult := HTMLWriterFactory(cHTML).OpenBody.AsHTML;
  ExpectedResult := '<html><body';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenBody.CloseTag.AsHTML;
  ExpectedResult := '<html><body></body>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenBody.CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><body></body></html>';
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestOpenParagraph;
var
  TestResult: string;
  ExpectedResult: string;
begin
  TestResult := HTMLWriterFactory(cHTML).OpenParagraph.AsHTML;
  ExpectedResult := '<html><p';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenParagraph.CloseTag.AsHTML;
  ExpectedResult := '<html><p></p>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenParagraph.CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><p></p></html>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenParagraph.AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><p>blah</p></html>';
  CheckEquals(ExpectedResult, TestResult);
end;

procedure test;
var
  This: Integer;
begin
  This := 9;
end;

procedure TestTHTMLWriter.TestOpenParagraphWithID;
var
  TestResult: string;
  ExpectedResult: string;
  TempStyle: string;
begin
  TempStyle := 'nerster: hormle';
  ExpectedResult := HTML(Format('<p id="%s"></p>', [TempStyle]));
  TestResult := HTMLWriterFactory(cHTML).OpenParagraphWithID(TempStyle).CloseTag.CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestOpenParagraphWithStyle;
var
  TestResult: string;
  ExpectedResult: string;
  TempStyle: string;
begin
  TempStyle := 'nerster: hormle';
  ExpectedResult := HTML(Format('<p style="%s"></p>', [TempStyle]));
  TestResult := HTMLWriterFactory(cHTML).OpenParagraphWithStyle(TempStyle).CloseTag.CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestOpenParam;
var
  TestResult: string;
  ExpectedResult: string;
  TempTag1, TempTag2: string;
  TempName: string;
  TempValue: string;
begin
  TempTag1 := cObject;
  TempTag2 := cParam;

  TempName := 'joople';
  TestResult := HTMLWriterFactory(cHTML).OpenObject.OpenParam(TempName).AsHTML;
  ExpectedResult := Format('<html><%s><%s name="%s"', [TempTag1, TempTag2, TempName]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenObject.OpenParam(TempName).CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s><%s name="%s"></%s>', [TempTag1, TempTag2, TempName, TempTag2]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenObject.OpenParam(TempName).CloseTag.CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s><%s name="%s"></%s></%s></html>', [TempTag1, TempTag2, TempName, TempTag2, TempTag1]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenObject.OpenParam(TempName).AddText('blah').CloseTag.CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s><%s name="%s">blah</%s></%s></html>', [TempTag1, TempTag2, TempName, TempTag2, TempTag1]);
  CheckEquals(ExpectedResult, TestResult);

  TempValue := 'mortopper';
  TestResult := HTMLWriterFactory(cHTML).OpenObject.OpenParam(TempName, TempValue).AddText('blah').CloseTag.CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s><%s name="%s" value="%s">blah</%s></%s></html>', [TempTag1, TempTag2, TempName, TempValue, TempTag2, TempTag1]);
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestAddParagraphTextWithStyle;
var
  TestResult: string;
  ExpectedResult: string;
  TempStyle: string;
  TempText: string;
begin
  TempStyle := 'nerster: hormle';
  TempText := 'jimkast';
  ExpectedResult := HTML(Format('<p style="%s">%s</p>', [TempStyle, TempText]));
  TestResult := HTMLWriterFactory(cHTML).AddParagraphTextWithStyle(TempText, TempStyle).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestAddParagraphTextWithClass;
var
  TestResult: string;
  ExpectedResult: string;
  TempClass: string;
  TempText: string;
begin
  TempClass := 'nerster: hormle';
  TempText := 'jimkast';
  ExpectedResult := HTML(Format('<p class="%s">%s</p>', [TempClass, TempText]));
  TestResult := HTMLWriterFactory(cHTML).AddParagraphTextwithClass(TempText, TempClass).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestAddParagraphTextWithID;
var
  TestResult: string;
  ExpectedResult: string;
  TempStyle: string;
  TempText: string;
begin
  TempStyle := 'nerster: hormle';
  TempText := 'jimkast';
  ExpectedResult := HTML(Format('<p id="%s">%s</p>', [TempStyle, TempText]));
  TestResult := HTMLWriterFactory(cHTML).AddParagraphTextwithID(TempText, TempStyle).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestOpenSample;
var
  TestResult: string;
  ExpectedResult: string;
  TempTag: string;
begin
  TempTag := TFormatTypeStrings[ftSample];

  TestResult := HTMLWriterFactory(cHTML).OpenSample.AsHTML;
  ExpectedResult := Format('<html><%s', [TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenSample.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenSample.CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenSample.AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s>blah</%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestOpenScript;
var
  TestResult: string;
  ExpectedResult: string;
begin
  TestResult := HTMLWriterFactory(cHTML).OpenScript.AsHTML;
  ExpectedResult := '<html><script';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenScript.CloseTag.AsHTML;
  ExpectedResult := '<html><script></script>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenScript.CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><script></script></html>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenScript.AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><script>blah</script></html>';
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestOpenSelect;
var
  TestResult: string;
  ExpectedResult: string;
  TempTag: string;
  TempName: string;
begin
  TempTag := cSelect;
  TempName := 'grewsack';

  TestResult := HTMLWriterFactory(cHTML).OpenForm.OpenSelect(TempName).AsHTML;
  ExpectedResult := Format('<html><form method="get"><%s name="%s"', [TempTag, TempName]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenForm.OpenSelect(TempName).CloseTag.AsHTML;
  ExpectedResult := Format('<html><form method="get"><%s name="%s"></%s>', [TempTag, TempName, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenForm.OpenSelect(TempName).CloseTag.CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><form method="get"><%s name="%s"></%s></form></html>', [TempTag, TempName, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenForm.OpenSelect(TempName).AddText('blah').CloseTag.CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><form method="get"><%s name="%s">blah</%s></form></html>', [TempTag, TempName, TempTag]);
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestOpenSmall;
var
  TestResult: string;
  ExpectedResult: string;
  TempTag: string;
begin
  TempTag := TFormatTypeStrings[ftSmall];

  TestResult := HTMLWriterFactory(cHTML).OpenSmall.AsHTML;
  ExpectedResult := Format('<html><%s', [TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenSmall.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenSmall.CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenSmall.AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s>blah</%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestOpenSpan;
var
  TestResult: string;
  ExpectedResult: string;
begin
  TestResult := HTMLWriterFactory(cHTML).OpenSpan.AsHTML;
  ExpectedResult := '<html><span';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenSpan.CloseTag.AsHTML;
  ExpectedResult := '<html><span></span>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenSpan.CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><span></span></html>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenSpan.AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><span>blah</span></html>';
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestOpenDefinition;
var
  TestResult: string;
  ExpectedResult: string;
  TempTag: string;
begin
  TempTag := TFormatTypeStrings[ftDefinition];

  TestResult := HTMLWriterFactory(cHTML).OpenDefinition.AsHTML;
  ExpectedResult := Format('<html><%s', [TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenDefinition.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenDefinition.CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenDefinition.AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s>blah</%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestOpenDelete;
var
  TestResult: string;
  ExpectedResult: string;
  TempTag: string;
begin
  TempTag := TFormatTypeStrings[ftDelete];

  TestResult := HTMLWriterFactory(cHTML).OpenDelete.AsHTML;
  ExpectedResult := Format('<html><%s', [TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenDelete.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenDelete.CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenDelete.AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s>blah</%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestOpenDiv;
var
  TestResult: string;
  ExpectedResult: string;
begin
  TestResult := HTMLWriterFactory(cHTML).OpenDiv.AsHTML;
  ExpectedResult := '<html><div';

  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenDiv.CloseTag.AsHTML;
  ExpectedResult := '<html><div></div>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenDiv.CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><div></div></html>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenDiv.AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><div>blah</div></html>';
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestOpenAbbreviation;
var
  TestResult: string;
  ExpectedResult: string;
  TempTag: string;
begin
  TempTag := TFormatTypeStrings[ftAbbreviation];

  TestResult := HTMLWriterFactory(cHTML).OpenAbbreviation.AsHTML;
  ExpectedResult := Format('<html><%s', [TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenAbbreviation.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenAbbreviation.CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenAbbreviation.AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s>blah</%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestOpenAcronym;
var
  TestResult: string;
  ExpectedResult: string;
  TempTag: string;
begin
  TempTag := TFormatTypeStrings[ftAcronym];

  TestResult := HTMLWriterFactory(cHTML).OpenAcronym.AsHTML;
  ExpectedResult := Format('<html><%s', [TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenAcronym.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenAcronym.CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenAcronym.AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s>blah</%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestOpenAddress;
var
  TestResult: string;
  ExpectedResult: string;
  TempTag: string;
begin
  TempTag := TFormatTypeStrings[ftAddress];

  TestResult := HTMLWriterFactory(cHTML).OpenAddress.AsHTML;
  ExpectedResult := Format('<html><%s', [TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenAddress.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenAddress.CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenAddress.AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s>blah</%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestOpenAnchor;
var
  TestResult: string;
  ExpectedResult: string;
  TempText: string;
  TempHREF: string;
begin
  TestResult := HTMLWriterFactory(cHTML).OpenAnchor.AsHTML;
  ExpectedResult := '<html><a';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenAnchor.CloseTag.AsHTML;
  ExpectedResult := '<html><a></a>';
  CheckEquals(ExpectedResult, TestResult);

  TempText := 'farbler';
  TestResult := HTMLWriterFactory(cHTML).OpenAnchor(TempText).CloseTag.AsHTML;
  ExpectedResult := Format('<html><a name="%s"></a>', [TempText]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenAnchor(TempText).CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><a name="%s"></a></html>', [TempText]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenAnchor.AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><a>blah</a></html>';
  CheckEquals(ExpectedResult, TestResult);

  TempHREF := 'http://www.nickhodges.com';
  TempText := 'Nick Hodges';
  TestResult := HTMLWriterFactory(cHTML).OpenAnchor(TempHREF, TempText).CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><a href="%s">%s</a></html>', [TempHREF, TempText]);
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestOpenBDO;
var
  TestResult: string;
  ExpectedResult: string;
  TempTag: string;
begin
  TempTag := TFormatTypeStrings[ftBDO];

  TestResult := HTMLWriterFactory(cHTML).OpenBDO.AsHTML;
  ExpectedResult := Format('<html><%s', [TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenBDO.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenBDO.CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenBDO.AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s>blah</%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestOpenBig;
var
  TestResult: string;
  ExpectedResult: string;
  TempTag: string;
begin
  TempTag := TFormatTypeStrings[ftBig];

  TestResult := HTMLWriterFactory(cHTML).OpenBig.AsHTML;
  ExpectedResult := Format('<html><%s', [TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenBig.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenBig.CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenBig.AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s>blah</%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestOpenBlockQuote;
var
  TestResult: string;
  ExpectedResult: string;
begin
  TestResult := HTMLWriterFactory(cHTML).OpenBlockQuote.AsHTML;
  ExpectedResult := '<html><blockquote';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenBlockQuote.CloseTag.AsHTML;
  ExpectedResult := '<html><blockquote></blockquote>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenBlockQuote.CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><blockquote></blockquote></html>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenBlockQuote.AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><blockquote>blah</blockquote></html>';
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestAddParagraphText;
var
  TestResult, ExpectedResult: string;
  TempString: string;
begin
  TempString := 'grundle';

  ExpectedResult := '<html><p>' + TempString + '</p>';
  TestResult := HTMLWriterFactory(cHTML).AddParagraphText(TempString).AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := HTML('<p>' + TempString + '</p>');
  TestResult := HTMLWriterFactory(cHTML).AddParagraphText(TempString).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestAddSampleText;
var
  TestResult, ExpectedResult: string;
  TempString: string;
  TempTag: string;
begin
  TempString := 'grundle';
  TempTag := TFormatTypeStrings[ftSample];

  ExpectedResult := Format('<html><%s>%s</%s>', [TempTag, TempString, TempTag]);
  TestResult := HTMLWriterFactory(cHTML).AddSampleText(TempString).AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := HTML(Format('<%s>%s</%s>', [TempTag, TempString, TempTag]));
  TestResult := HTMLWriterFactory(cHTML).AddSampleText(TempString).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestAddScript;
var
  TestResult, ExpectedResult: string;
  TempString: string;
begin
  TempString := 'grundle';

  ExpectedResult := '<html><script>' + TempString + '</script>';
  TestResult := HTMLWriterFactory(cHTML).AddScript(TempString).AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := HTML('<script>' + TempString + '</script>');
  TestResult := HTMLWriterFactory(cHTML).AddScript(TempString).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestAddSmallText;
var
  TestResult, ExpectedResult: string;
  TempString: string;
  TempTag: string;
begin
  TempString := 'grundle';
  TempTag := TFormatTypeStrings[ftSmall];

  ExpectedResult := Format('<html><%s>%s</%s>', [TempTag, TempString, TempTag]);
  TestResult := HTMLWriterFactory(cHTML).AddSmallText(TempString).AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := HTML(Format('<%s>%s</%s>', [TempTag, TempString, TempTag]));
  TestResult := HTMLWriterFactory(cHTML).AddSmallText(TempString).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestAddSpanText;
var
  TestResult, ExpectedResult: string;
  TempString: string;
begin
  TempString := 'grundle';

  ExpectedResult := '<html><span>' + TempString + '</span>';
  TestResult := HTMLWriterFactory(cHTML).AddSpanText(TempString).AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := HTML('<span>' + TempString + '</span>');
  TestResult := HTMLWriterFactory(cHTML).AddSpanText(TempString).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestAddDefinitionText;
var
  TestResult, ExpectedResult: string;
  TempString: string;
  TempTag: string;
begin
  TempString := 'merkleher';
  TempTag := TFormatTypeStrings[ftDefinition];

  ExpectedResult := Format('<html><%s>%s</%s>', [TempTag, TempString, TempTag]);
  TestResult := HTMLWriterFactory(cHTML).AddDefinitionText(TempString).AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := HTML(Format('<%s>%s</%s>', [TempTag, TempString, TempTag]));
  TestResult := HTMLWriterFactory(cHTML).AddDefinitionText(TempString).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestAddDeleteText;
var
  TestResult, ExpectedResult: string;
  TempString: string;
  TempTag: string;
begin
  TempString := 'shartip';
  TempTag := TFormatTypeStrings[ftDelete];

  ExpectedResult := Format('<html><%s>%s</%s>', [TempTag, TempString, TempTag]);
  TestResult := HTMLWriterFactory(cHTML).AddDeleteText(TempString).AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := HTML(Format('<%s>%s</%s>', [TempTag, TempString, TempTag]));
  TestResult := HTMLWriterFactory(cHTML).AddDeleteText(TempString).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestAddDivText;
var
  TestResult, ExpectedResult: string;
  TempString: string;
begin
  TempString := 'breekton';

  ExpectedResult := '<html><div>' + TempString + '</div>';
  TestResult := HTMLWriterFactory(cHTML).AddDivText(TempString).AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := HTML('<div>' + TempString + '</div>');
  TestResult := HTMLWriterFactory(cHTML).AddDivText(TempString).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestAddDivTextWithClass;
var
  TempClass: string;
  TempString: string;
  TestResult: string;
  ExpectedResult: string;
begin
  TempString := 'flooble';
  TempClass := 'main';
  ExpectedResult := HTML(Format('<div class="%s">%s</div>', [TempClass, TempString]));
  TestResult := HTMLWriterFactory(cHTML).AddDivTextWithClass(TempString, TempClass).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestAddDivTextWithID;
var
  TempID: string;
  TempString: string;
  TestResult: string;
  ExpectedResult: string;
begin
  TempString := 'fareter';
  TempID := 'main';
  ExpectedResult := HTML(Format('<div id="%s">%s</div>', [TempID, TempString]));
  TestResult := HTMLWriterFactory(cHTML).AddDivTextWithID(TempString, TempID).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestAddDivTextWithStyle;
var
  TempStyle: string;
  TempString: string;
  TestResult: string;
  ExpectedResult: string;
begin
  TempString := 'quented';
  TempStyle := 'border-top:1px solid #c9d7f1;font-size:1px';
  ExpectedResult := HTML(Format('<div style="%s">%s</div>', [TempStyle, TempString]));
  TestResult := HTMLWriterFactory(cHTML).AddDivTextWithStyle(TempString, TempStyle).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestOpenBold;
var
  TestResult: string;
  ExpectedResult: string;
  Temp: IHTMLWriter;
begin
  Temp := HTMLWriterFactory(cHTML).OpenBold;
  TestResult := Temp.AsHTML;
  ExpectedResult := '<html><b';
  CheckEquals(ExpectedResult, TestResult);

  Temp := HTMLWriterFactory(cHTML).OpenBold;
  Temp := Temp.CloseTag;
  TestResult := Temp.AsHTML;
  ExpectedResult := '<html><b></b>';
  CheckEquals(ExpectedResult, TestResult);

  Temp := HTMLWriterFactory(cHTML).OpenBold;
  Temp := Temp.CloseTag;
  Temp := Temp.CloseTag;
  TestResult := Temp.AsHTML;
  ExpectedResult := '<html><b></b></html>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenBold.AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><b>blah</b></html>';
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestOpenInsert;
var
  TestResult: string;
  ExpectedResult: string;
begin
  TestResult := HTMLWriterFactory(cHTML).OpenInsert.AsHTML;
  ExpectedResult := '<html><ins';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenInsert.CloseTag.AsHTML;
  ExpectedResult := '<html><ins></ins>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenInsert.CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><ins></ins></html>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenInsert.AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><ins>blah</ins></html>';
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestOpenEmphasis;
var
  TestResult: string;
  ExpectedResult: string;
begin
  TestResult := HTMLWriterFactory(cHTML).OpenEmphasis.AsHTML;
  ExpectedResult := '<html><em';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenEmphasis.CloseTag.AsHTML;
  ExpectedResult := '<html><em></em>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenEmphasis.CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><em></em></html>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenEmphasis.AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><em>blah</em></html>';
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestFieldSetAndLegend;
var
  TestResult: string;
  ExpectedResult: string;
  TempTag: string;
begin
  TempTag := cFieldSet;

  TestResult := HTMLWriterFactory(cHTML).OpenForm.OpenFieldSet.AsHTML;
  ExpectedResult := Format('<html><form method="get"><%s', [TempTag]);
  CheckEquals(ExpectedResult, TestResult, '#1');

  TestResult := HTMLWriterFactory(cHTML).OpenForm.OpenFieldSet.CloseTag.AsHTML;
  ExpectedResult := Format('<html><form method="get"><%s></%s>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult, '#2');

  TestResult := HTMLWriterFactory(cHTML).OpenForm.OpenFieldSet.CloseTag.CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><form method="get"><%s></%s></form></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult, '#3');

  TestResult := HTMLWriterFactory(cHTML).OpenForm.OpenFieldSet.AddText('blah').CloseTag.CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><form method="get"><%s>blah</%s></form></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult, '#4');

  TestResult := HTMLWriterFactory(cHTML).OpenForm.OpenFieldSet.OpenLegend.AsHTML;
  ExpectedResult := Format('<html><form method="get"><%s><%s', [cFieldSet, cLegend]);
  CheckEquals(ExpectedResult, TestResult, '#4');

  TestResult := HTMLWriterFactory(cHTML).OpenForm.OpenFieldSet.OpenLegend.CloseTag.AsHTML;
  ExpectedResult := Format('<html><form method="get"><%s><%s></%s>', [cFieldSet, cLegend, cLegend]);
  CheckEquals(ExpectedResult, TestResult, '#5');

  TestResult := HTMLWriterFactory(cHTML).OpenForm.OpenFieldSet.OpenLegend.CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><form method="get"><%s><%s></%s></%s>', [cFieldSet, cLegend, cLegend, cFieldSet]);
  CheckEquals(ExpectedResult, TestResult, '#6');

  TestResult := HTMLWriterFactory(cHTML).OpenForm.OpenFieldSet.AddLegend('blah').CloseTag.CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><form method="get"><%s><%s>blah</%s></%s></form></html>', [cFieldSet, cLegend, cLegend, cFieldSet]);
  CheckEquals(ExpectedResult, TestResult, '#7');

  CheckException(ENotInFieldsetTagException, procedure()begin TestResult := HTMLWriterFactory(cHTML).OpenBody.OpenLegend.CloseTag.CloseTag.CloseTag.AsHTML; end, 'Failed to raise an exception adding a <legend> tag outside the <fieldset> tag. ');

end;

procedure TestTHTMLWriter.TestFrame;
var
  TestResult: string;
  ExpectedResult: string;
  TempTag: string;
  TempColor: string;
begin
  TempTag := cFrame;

  TestResult := HTMLWriterFactory(cHTML).OpenFrameSet.OpenFrame.AsHTML;
  ExpectedResult := Format('<html><frameset><%s', [TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenFrameSet.OpenFrame.CloseTag.AsHTML;
  ExpectedResult := Format('<html><frameset><%s></%s>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenFrameSet.OpenFrame.CloseTag.CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><frameset><%s></%s></frameset></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenFrameSet.OpenFrame.AddText('blah').CloseTag.CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><frameset><%s>blah</%s></frameset></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TempColor := 'red';
  TestResult := HTMLWriterFactory(cHTML).OpenFrameSet.OpenFrame.AddAttribute('color', TempColor).AddText('blah').CloseTag.CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><frameset><%s color="%s">blah</%s></frameset></html>', [TempTag, TempColor, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestFrameset;
var
  TestResult: string;
  ExpectedResult: string;
  TempTag: string;
  TempColor: string;
begin
  TempTag := cFrameset;

  TestResult := HTMLWriterFactory(cHTML).OpenFrameSet.AsHTML;
  ExpectedResult := Format('<html><%s', [TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenFrameSet.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenFrameSet.CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenFrameSet.AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s>blah</%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TempColor := 'red';
  TestResult := HTMLWriterFactory(cHTML).OpenFrameSet.AddAttribute('color', TempColor).AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s color="%s">blah</%s></html>', [TempTag, TempColor, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestInput;
var
  TestResult: string;
  ExpectedResult: string;
  TempTag: string;
  TempName: string;
  TempType: TInputType;
begin
  TempTag := cInput;

  TestResult := HTMLWriterFactory(cHTML).OpenForm.OpenInput.AsHTML;
  ExpectedResult := Format('<html><form method="get"><%s', [TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenForm.OpenInput.CloseTag.AsHTML;
  ExpectedResult := Format('<html><form method="get"><%s />', [TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenForm.OpenInput.CloseTag.CloseForm.CloseTag.AsHTML;
  ExpectedResult := Format('<html><form method="get"><%s /></form></html>', [TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenForm.OpenInput.CloseTag.CloseForm.CloseTag.AsHTML;
  ExpectedResult := Format('<html><form method="get"><%s /></form></html>', [TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TempName := 'Verdana';
  TempType := itHidden;
  TestResult := HTMLWriterFactory(cHTML).OpenForm.OpenInput(TempType, 'farble').CloseTag.CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><form method="get"><%s type="%s" name="farble" /></form></html>', [TempTag, TInputTypeStrings[TempType]]);
  CheckEquals(ExpectedResult, TestResult);

  for TempType := Low(TInputType) to High(TInputType) do
  begin
    TestResult := HTMLWriterFactory(cHTML).OpenForm.OpenInput(TempType).CloseTag.CloseForm.CloseDocument.AsHTML;
    ExpectedResult := Format('<html><form method="get"><%s type="%s" /></form></html>', [TempTag, TInputTypeStrings[TempType]]);
    CheckEquals(ExpectedResult, TestResult);
  end;

end;

procedure TestTHTMLWriter.TestArbitraryTag;
var
  TestResult: string;
  ExpectedResult: string;
  TempTag: string;
begin
  TempTag := 'fritle';

  ExpectedResult := Format('<%s></%s>', [TempTag, TempTag]);
  TestResult := HTMLWriterCreate(TempTag).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := HTML(Format('<%s></%s>', [TempTag, TempTag]));
  TestResult := HTMLWriterCreateDocument.AddTag(TempTag).CloseTag.CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestArea;
var
  TestResult: string;
  ExpectedResult: string;
  TempTag: string;
  TempColor: string;
  TempText: string;
begin
  TempTag := cArea;
  TempText := 'fretewsie';

  TestResult := HTMLWriterFactory(cHTML).OpenMap.OpenArea(TempText).AsHTML;
  ExpectedResult := Format('<html><map><%s alt="%s"', [TempTag, TempText]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenMap.OpenArea(TempText).CloseTag.AsHTML;
  ExpectedResult := Format('<html><map><%s alt="%s" />', [TempTag, TempText]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenMap.OpenArea(TempText).CloseTag.CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><map><%s alt="%s" /></map></html>', [TempTag, TempText]);
  CheckEquals(ExpectedResult, TestResult);

  TempColor := 'red';
  TestResult := HTMLWriterFactory(cHTML).OpenMap.OpenArea(TempText).AddAttribute('color', TempColor).CloseTag.CloseTag.CloseDocument.AsHTML;
  ExpectedResult := Format('<html><map><%s alt="%s" color="%s" /></map></html>', [TempTag, TempText, TempColor, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestBaseFont;
var
  TestResult: string;
  ExpectedResult: string;
  TempTag: string;
  TempName: string;
begin
  TempTag := cBaseFont;

  TestResult := HTMLWriterFactory(cHTML).OpenHead.OpenBaseFont.AsHTML;
  ExpectedResult := Format('<html><head><%s', [TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenHead.OpenBaseFont.CloseTag.AsHTML;
  ExpectedResult := Format('<html><head><%s />', [TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenHead.OpenBaseFont.CloseTag.CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><head><%s /></head></html>', [TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TempName := 'Verdana';
  TestResult := HTMLWriterFactory(cHTML).OpenHead.OpenBaseFont.AddAttribute('face', TempName).CloseTag.CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><head><%s face="%s" /></head></html>', [TempTag, TempName, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestButton;
var
  TestResult: string;
  ExpectedResult: string;
  TempName: string;
begin
  TempName := 'loople';
  ExpectedResult := Format(HTML('<form method="get"><button name="%s"></button></form>'), [TempName]);
  TestResult := HTMLWriterFactory(cHTML).OpenForm.OpenButton(TempName).CloseTag().CloseForm.CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestLabel;
var
  TestResult: string;
  ExpectedResult: string;
  TempName: string;
  Temp: IHTMLWriter;
begin
  TempName := 'kreetom';
  ExpectedResult := Format(HTML('<form method="get"><%s></%s></form>'), [cLabel, cLabel]);
  Temp := HTMLWriterFactory(cHTML);

  Temp := Temp.OpenForm;
  Temp := Temp.OpenLabel;
  Temp := Temp.CloseTag;
  Temp := Temp.CloseForm;
  Temp := Temp.CloseTag;
  TestResult := Temp.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestMap;
var
  TestResult: string;
  ExpectedResult: string;
  TempTag: string;
  TempColor: string;
begin
  TempTag := cMap;

  TestResult := HTMLWriterFactory(cHTML).OpenMap.AsHTML;
  ExpectedResult := Format('<html><%s', [TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenMap.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenMap.CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenMap.AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s>blah</%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TempColor := 'red';
  TestResult := HTMLWriterFactory(cHTML).OpenMap.AddAttribute('color', TempColor).AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s color="%s">blah</%s></html>', [TempTag, TempColor, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestNewAtttributes;
var
  TestResult: string;
  ExpectedResult: string;
begin
  TestResult := HTMLWriterFactory(cHTML)['this', 'that'].CloseTag.AsHTML;
  ExpectedResult := '<html this="that"></html>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML)['this', 'that'].AddBoldText('grested').CloseTag.AsHTML;
  ExpectedResult := '<html this="that"><b>grested</b></html>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML)['this', 'that']['brethal', 'trooter'].AddBoldText('grested').CloseTag.AsHTML;
  ExpectedResult := '<html this="that" brethal="trooter"><b>grested</b></html>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenDiv['this', 'that']['brethal', 'trooter'].AddBoldText('grested').CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><div this="that" brethal="trooter"><b>grested</b></div></html>';
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestNoFrames;
var
  TestResult: string;
  ExpectedResult: string;
  TempTag: string;
  TempColor: string;
begin
  TempTag := cNoFrames;

  TestResult := HTMLWriterFactory(cHTML).OpenNoFrames.AsHTML;
  ExpectedResult := Format('<html><%s', [TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenNoFrames.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenNoFrames.CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenNoFrames.AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s>blah</%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TempColor := 'red';
  TestResult := HTMLWriterFactory(cHTML).OpenNoFrames.AddAttribute('color', TempColor).AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s color="%s">blah</%s></html>', [TempTag, TempColor, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestOpenFont;
var
  TestResult: string;
  ExpectedResult: string;
  TempTag: string;
  TempColor: string;
begin
  TempTag := TFormatTypeStrings[ftFont];

  TestResult := HTMLWriterFactory(cHTML).OpenFont.AsHTML;
  ExpectedResult := Format('<html><%s', [TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenFont.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenFont.CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenFont.AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s>blah</%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TempColor := 'red';
  TestResult := HTMLWriterFactory(cHTML).OpenFont.AddAttribute('color', TempColor).AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s color="%s">blah</%s></html>', [TempTag, TempColor, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestOpenStrike;
var
  TestResult: string;
  ExpectedResult: string;
  TempTag: string;
begin
  TempTag := TFormatTypeStrings[ftStrike];

  TestResult := HTMLWriterFactory(cHTML).OpenStrike.AsHTML;
  ExpectedResult := Format('<html><%s', [TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenStrike.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenStrike.CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenStrike.AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s>blah</%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestOpenStrong;
var
  TestResult: string;
  ExpectedResult: string;
begin
  TestResult := HTMLWriterFactory(cHTML).OpenStrong.AsHTML;
  ExpectedResult := '<html><strong';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenStrong.CloseTag.AsHTML;
  ExpectedResult := '<html><strong></strong>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenStrong.CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><strong></strong></html>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenStrong.AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><strong>blah</strong></html>';
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestOpenTable;
var
  TestResult: string;
  ExpectedResult: string;
begin
  TestResult := HTMLWriterFactory(cHTML).OpenTable.AsHTML;
  ExpectedResult := '<html><table';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenTable.CloseTable.AsHTML;
  ExpectedResult := '<html><table></table>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenTable.CloseTable.CloseTag.AsHTML;
  ExpectedResult := '<html><table></table></html>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenTable.AddText('blah').CloseTable.CloseTag.AsHTML;
  ExpectedResult := '<html><table>blah</table></html>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenTable(3).AddText('blah').CloseTable.CloseTag.AsHTML;
  ExpectedResult := '<html><table border="3">blah</table></html>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenTable(3, 4).AddText('blah').CloseTable.CloseTag.AsHTML;
  ExpectedResult := '<html><table border="3" cellpadding="4">blah</table></html>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenTable(3, 4, 5).AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><table border="3" cellpadding="4" cellspacing="5">blah</table></html>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenTable(-1, 4, 5).AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><table cellpadding="4" cellspacing="5">blah</table></html>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenTable(-1, -1, 5).AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><table cellspacing="5">blah</table></html>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenTable(3, -1, 5).AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><table border="3" cellspacing="5">blah</table></html>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenTable(-1, -1, 5).AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><table cellspacing="5">blah</table></html>';
  CheckEquals(ExpectedResult, TestResult);

  // Width
  TestResult := HTMLWriterFactory(cHTML).OpenTable(3, 4, 5, THTMLWidth.Create(6, ipIsNotPercentage)).AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><table border="3" cellpadding="4" cellspacing="5" width="6">blah</table></html>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenTable(-1, 4, 5, THTMLWidth.Create(6, ipIsNotPercentage)).AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><table cellpadding="4" cellspacing="5" width="6">blah</table></html>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenTable(-1, -1, 5, THTMLWidth.Create(6, ipIsNotPercentage)).AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><table cellspacing="5" width="6">blah</table></html>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenTable(3, -1, 5, THTMLWidth.Create(6, ipIsNotPercentage)).AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><table border="3" cellspacing="5" width="6">blah</table></html>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenTable(-1, -1, 5, THTMLWidth.Create(6, ipIsNotPercentage)).AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><table cellspacing="5" width="6">blah</table></html>';
  CheckEquals(ExpectedResult, TestResult);

  // Width as percentage
  TestResult := HTMLWriterFactory(cHTML).OpenTable(3, 4, 5, THTMLWidth.Create(6, ipIsPercentage)).AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><table border="3" cellpadding="4" cellspacing="5" width="6%">blah</table></html>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenTable(-1, 4, 5, THTMLWidth.Create(6, ipIsPercentage)).AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><table cellpadding="4" cellspacing="5" width="6%">blah</table></html>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenTable(-1, -1, 5, THTMLWidth.Create(6, ipIsPercentage)).AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><table cellspacing="5" width="6%">blah</table></html>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenTable(3, -1, 5, THTMLWidth.Create(6, ipIsPercentage)).AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><table border="3" cellspacing="5" width="6%">blah</table></html>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenTable(-1, -1, 5, THTMLWidth.Create(6, ipIsPercentage)).AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><table cellspacing="5" width="6%">blah</table></html>';
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestOpenTableData;
var
  TestResult: string;
  ExpectedResult: string;
begin
  TestResult := HTMLWriterFactory(cHTML).OpenTable.OpenTableRow.OpenTableData.AsHTML;
  ExpectedResult := '<html><table><tr><td';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenTable.OpenTableRow.OpenTableData.CloseTag.AsHTML;
  ExpectedResult := '<html><table><tr><td></td>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenTable.OpenTableRow.OpenTableData.CloseTag.CloseTag.CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><table><tr><td></td></tr></table></html>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenTable.OpenTableRow.OpenTableData.AddText('blah').CloseTag.CloseTag.CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><table><tr><td>blah</td></tr></table></html>';
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestOpenTableHeader;
var
  TestResult: string;
  ExpectedResult: string;
begin
  TestResult := HTMLWriterFactory(cHTML).OpenTable.OpenTableRow.OpenTableHeader.AddText('blah').CloseTag.CloseTag.CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><table><tr><th>blah</th></tr></table></html>';
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestAddTableData;
var
  TestResult: string;
  ExpectedResult: string;
begin
  TestResult := HTMLWriterFactory(cHTML).OpenTable.OpenTableRow.AddTableData('blah').CloseTag(ucoUseCRLF).CloseTag(ucoUseCRLF).CloseTag.AsHTML;
  ExpectedResult := '<html><table><tr><td>blah</td></tr>' + cCRLF + '</table>' + cCRLF + '</html>';
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestOpenTableRow;
var
  TestResult: string;
  ExpectedResult: string;
begin
  TestResult := HTMLWriterFactory(cHTML).OpenTable.OpenTableRow.AsHTML;
  ExpectedResult := '<html><table><tr';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenTable.OpenTableRow.CloseTag.AsHTML;
  ExpectedResult := '<html><table><tr></tr>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenTable.OpenTableRow.CloseTag.CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><table><tr></tr></table></html>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenTable.OpenTableRow.AddText('blah').CloseTag.CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><table><tr>blah</tr></table></html>';
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestOpenTeletype;
var
  TestResult: string;
  ExpectedResult: string;
  TempTag: string;
begin
  TempTag := TFormatTypeStrings[ftTeletype];

  TestResult := HTMLWriterFactory(cHTML).OpenTeletype.AsHTML;
  ExpectedResult := Format('<html><%s', [TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenTeletype.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenTeletype.CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenTeletype.AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s>blah</%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestOpenTextArea;
var
  TestResult: string;
  ExpectedResult: string;
  TempTag: string;
  TempName: string;
  TempRows: integer;
  TempCols: integer;
begin
  TempTag := cTextArea;
  TempName := 'prestergrad';
  TempCols := 42;
  TempRows := 44;

  TestResult := HTMLWriterFactory(cHTML).OpenForm.OpenTextArea(TempName, TempCols, TempRows).AsHTML;
  ExpectedResult := Format('<html><form method="get"><%s name="%s" cols="%d" rows="%d"', [TempTag, TempName, TempCols, TempRows]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenForm.OpenTextArea(TempName, TempCols, TempRows).CloseTag.AsHTML;
  ExpectedResult := Format('<html><form method="get"><%s name="%s" cols="%d" rows="%d"></%s>', [TempTag, TempName, TempCols, TempRows, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenForm.OpenTextArea(TempName, TempCols, TempRows).CloseTag.CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><form method="get"><%s name="%s" cols="%d" rows="%d"></%s></form></html>', [TempTag, TempName, TempCols, TempRows, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenForm.OpenTextArea(TempName, TempCols, TempRows).AddText('blah').CloseTag.CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><form method="get"><%s name="%s" cols="%d" rows="%d">blah</%s></form></html>', [TempTag, TempName, TempCols, TempRows, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestOpenOptGroup;
var
  TestResult: string;
  ExpectedResult: string;
  TempLabel: string;
  TempName: string;
begin
  TempLabel := 'lootwed';
  TempName := 'sterkhard';
  ExpectedResult := Format('<html><form method="get"><select name="%s"><optgroup label="%s"></optgroup></select></form></html>', [TempName, TempLabel]); ;
  TestResult := HTMLWriterFactory(cHTML).OpenForm().OpenSelect(TempName).OpenOptGroup(TempLabel).CloseTag().CloseTag().CloseTag().CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestOpenOption;
var
  TestResult: string;
  ExpectedResult: string;
  TempLabel: string;
  TempName: string;
begin
  TempLabel := 'lootwed';
  TempName := 'sterkhard';
  ExpectedResult := Format('<html><form method="get"><select name="%s"><optgroup label="%s"><option>blah</option></optgroup></select></form></html>', [TempName, TempLabel]); ;
  TestResult := HTMLWriterFactory(cHTML).OpenForm().OpenSelect(TempName).OpenOptGroup(TempLabel).OpenOption.AddText('blah').CloseTag.CloseTag().CloseTag().CloseTag().CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestOpenTitle;
var
  TestResult: string;
  ExpectedResult: string;
begin
  ExpectedResult := '<html><head><title';
  TestResult := HTMLWriterFactory(cHTML).OpenHead.OpenTitle.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := '<html><head><title></title>';
  TestResult := HTMLWriterFactory(cHTML).OpenHead.OpenTitle.CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := '<html><head><title></title></head>';
  TestResult := HTMLWriterFactory(cHTML).OpenHead.OpenTitle.CloseTag.CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := '<html><head><title></title></head></html>';
  TestResult := HTMLWriterFactory(cHTML).OpenHead.OpenTitle.CloseTag.CloseTag.CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := '<html><head><title>hethland</title></head></html>';
  TestResult := HTMLWriterFactory(cHTML).OpenHead.OpenTitle.AddText('hethland').CloseTag.CloseTag.CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestAddTitle;
var
  TestResult: string;
  ExpectedResult: string;
begin
  ExpectedResult := '<html><head><title>hethland</title></head></html>';
  TestResult := HTMLWriterFactory(cHTML).OpenHead.AddTitle('hethland').CloseTag.CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  CheckException(EHeadTagRequiredHTMLException, procedure()begin TestResult := HTMLWriterFactory(cHTML).AddTitle('threek').CloseTag.AsHTML; end, 'Failed to raise a EHeadTagRequiredHTMLException when adding a title outside of a <head> tag');

end;

procedure TestTHTMLWriter.TestOpenPre;
var
  TestResult: string;
  ExpectedResult: string;
begin
  TestResult := HTMLWriterFactory(cHTML).OpenPre.AsHTML;
  ExpectedResult := '<html><pre';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenPre.CloseTag.AsHTML;
  ExpectedResult := '<html><pre></pre>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenPre.CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><pre></pre></html>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenPre.AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><pre>blah</pre></html>';
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestOpenCenter;
var
  TestResult: string;
  ExpectedResult: string;
  TempTag: string;
begin
  TempTag := TFormatTypeStrings[ftCenter];

  TestResult := HTMLWriterFactory(cHTML).OpenCenter.AsHTML;
  ExpectedResult := Format('<html><%s', [TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenCenter.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenCenter.CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenCenter.AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s>blah</%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestOpenQuotation;
var
  TestResult: string;
  ExpectedResult: string;
  TempTag: string;
begin
  TempTag := TFormatTypeStrings[ftQuotation];

  TestResult := HTMLWriterFactory(cHTML).OpenQuotation.AsHTML;
  ExpectedResult := Format('<html><%s', [TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenQuotation.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenQuotation.CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenQuotation.AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s>blah</%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestOpenCite;
var
  TestResult: string;
  ExpectedResult: string;
begin
  TestResult := HTMLWriterFactory(cHTML).OpenCite.AsHTML;
  ExpectedResult := '<html><cite';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenCite.CloseTag.AsHTML;
  ExpectedResult := '<html><cite></cite>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenCite.CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><cite></cite></html>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenCite.AddText('blah').CloseTag.CloseDocument.AsHTML;
  ExpectedResult := '<html><cite>blah</cite></html>';
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestOpenCode;
var
  TestResult: string;
  ExpectedResult: string;
  TempTag: string;
begin
  TempTag := TFormatTypeStrings[ftCode];

  TestResult := HTMLWriterFactory(cHTML).OpenCode.AsHTML;
  ExpectedResult := Format('<html><%s', [TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenCode.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenCode.CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenCode.AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s>blah</%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestOpenCol;
var
  TestResult: string;
  ExpectedResult: string;
begin
  TestResult := HTMLWriterFactory(cHTML).OpenTable.OpenCaption.OpenCol.CloseTag.CloseTag.CloseTable.CloseTag.AsHTML;
  ExpectedResult := HTML('<table><caption><col /></caption></table>');
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestOpenColGroup;
var
  TestResult: string;
  TempString: string;
  ExpectedResult: string;
begin
  TempString := 'nestath';
  TestResult := HTMLWriterFactory(cHTML).OpenTable.OpenCaption.OpenColGroup.AddText(TempString).CloseTag.CloseTag.CloseTable.CloseTag.AsHTML;
  ExpectedResult := HTML(Format('<table><caption><colgroup>%s</colgroup></caption></table>', [TempString]));
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestOpenComment;
var
  TestResult: string;
  TempString: string;
  ExpectedResult: string;
begin
  TempString := 'wertybin';
  ExpectedResult := HTML(Format('<!-- %s -->', [TempString]));
  TestResult := HTMLWriterFactory(cHTML).OpenComment.AddText(TempString).CloseComment.CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestCaption;
var
  TestResult: string;
  TempString: string;
  ExpectedResult: string;
begin
  TempString := 'nestath';
  TestResult := HTMLWriterFactory(cHTML).OpenTable.OpenCaption.AddText(TempString).CloseTag.CloseTable.CloseTag.AsHTML;
  ExpectedResult := HTML(Format('<table><caption>%s</caption></table>', [TempString]));
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestCloseComment;
var
  TempString: string;
  ExpectedResult: string;
  TestResult: string;
begin
  TempString := 'gloppet';
  TestResult := HTMLWriterFactory(cHTML).OpenSpan.OpenComment.AddText(TempString).CloseComment.CloseTag.CloseTag.AsHTML;
  ExpectedResult := HTML(Format('<span><!-- %s --></span>', [TempString]));
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestCloseComment1;
var
  TempString: string;
  ExpectedResult: string;
  TestResult: string;
begin
  TempString := 'gloppet';
  TestResult := HTMLWriterFactory(cHTML).OpenSpan.OpenComment.AddText(TempString).CloseComment.CloseTag.CloseTag.AsHTML;
  ExpectedResult := HTML(Format('<span><!-- %s --></span>', [TempString]));
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenComment.CloseComment.CloseTag.AsHTML;
  ExpectedResult := '<html><!--  --></html>';
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestAddCodeText;
var
  TestResult, ExpectedResult: string;
  TempString: string;
  TempTag: string;
begin
  TempString := 'grundle';
  TempTag := TFormatTypeStrings[ftCode];

  ExpectedResult := Format('<html><%s>%s</%s>', [TempTag, TempString, TempTag]);
  TestResult := HTMLWriterFactory(cHTML).AddCodeText(TempString).AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := HTML(Format('<%s>%s</%s>', [TempTag, TempString, TempTag]));
  TestResult := HTMLWriterFactory(cHTML).AddCodeText(TempString).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestAddComment;
var
  TestResult: string;
  TempString: string;
  ExpectedResult: string;
begin
  TempString := 'gropter';
  ExpectedResult := HTML(Format('<!-- %s -->', [TempString]));
  TestResult := HTMLWriterFactory(cHTML).AddComment(TempString).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestOpenIFrame;
var
  TestResult: string;
  ExpectedResult: string;
  Temp: string;
begin
  ExpectedResult := HTML('<iframe></iframe>');
  TestResult := HTMLWriterFactory(cHTML).OpenIFrame.CloseTag.CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  Temp := 'http://www.nickhodges.com';
  ExpectedResult := Format(HTML('<iframe src="%s"></iframe>'), [Temp]);
  TestResult := HTMLWriterFactory(cHTML).OpenIFrame(Temp).CloseTag.CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := Format(HTML('<iframe src="%s" width="42" height="300"></iframe>'), [Temp]);
  TestResult := HTMLWriterFactory(cHTML).OpenIFrame(Temp, THTMLWidth.Create(42, ipIsNotPercentage), 300).CloseTag.CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestOpenImage;
var
  TestResult: string;
  ExpectedResult: string;
  TempSource: string;
begin
  TestResult := HTMLWriterFactory(cHTML).OpenImage.AsHTML;
  ExpectedResult := '<html><img';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenImage.CloseTag.AsHTML;
  ExpectedResult := '<html><img />';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenImage.CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><img /></html>';
  CheckEquals(ExpectedResult, TestResult);

  TempSource := 'blah.jpg';
  TestResult := HTMLWriterFactory(cHTML).OpenImage(TempSource).CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><img src="%s" /></html>', [TempSource]);
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestAddImage;
var
  TestResult: string;
  ExpectedResult: string;
  TempSource: string;
begin
  TempSource := 'blah.jpg';
  TestResult := HTMLWriterFactory(cHTML).AddImage(TempSource).CloseTag.AsHTML;
  ExpectedResult := Format('<html><img src="%s" /></html>', [TempSource]);
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestOpenItalic;
var
  TestResult: string;
  ExpectedResult: string;
begin
  TestResult := HTMLWriterFactory(cHTML).OpenItalic.AsHTML;
  ExpectedResult := '<html><i';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenItalic.CloseTag.AsHTML;
  ExpectedResult := '<html><i></i>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenItalic.CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><i></i></html>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenItalic.AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><i>blah</i></html>';
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestOpenKeyboard;
var
  TestResult: string;
  ExpectedResult: string;
  TempTag: string;
begin
  TempTag := TFormatTypeStrings[ftKeyboard];

  TestResult := HTMLWriterFactory(cHTML).OpenKeyboard.AsHTML;
  ExpectedResult := Format('<html><%s', [TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenKeyboard.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenKeyboard.CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenKeyboard.AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s>blah</%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestOpenMeta;
var
  TestResult: string;
  ExpectedResult: string;
begin
  ExpectedResult := '<html><head><meta /></head></html>';
  TestResult := HTMLWriterFactory(cHTML).OpenHead.OpenMeta.CloseTag.CloseTag.CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  CheckException(EHeadTagRequiredHTMLException, procedure()begin TestResult := HTMLWriterFactory(cHTML).OpenBody.OpenMeta.CloseTag.CloseTag.AsHTML; end, 'Failed to raise an exception adding a <meta> tag outside the <head> tag. ');

end;

procedure TestTHTMLWriter.TestOpenObject;
var
  TestResult: string;
  ExpectedResult: string;
  TempTag: string;
begin
  TempTag := cObject;

  TestResult := HTMLWriterFactory(cHTML).OpenObject.AsHTML;
  ExpectedResult := Format('<html><%s', [TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenObject.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenObject.CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenObject.AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s>blah</%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestOpenOrderedList;
var
  TestResult, ExpectedResult: string;
begin

  ExpectedResult := '<html><ol></ol></html>';
  TestResult := HTMLWriterFactory(cHTML).OpenOrderedList().CloseTag.CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := '<html><ol type="1"></ol></html>';
  TestResult := HTMLWriterFactory(cHTML).OpenOrderedList(ntNumber).CloseTag.CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := '<html><ol type="A"></ol></html>';
  TestResult := HTMLWriterFactory(cHTML).OpenOrderedList(ntUpperCase).CloseTag.CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := '<html><ol type="i"></ol></html>';
  TestResult := HTMLWriterFactory(cHTML).OpenOrderedList(ntLowerRoman).CloseTag.CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestOpenUnderline;
var
  TestResult: string;
  ExpectedResult: string;
begin
  TestResult := HTMLWriterFactory(cHTML).OpenUnderline.AsHTML;
  ExpectedResult := '<html><u';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenUnderline.CloseTag.AsHTML;
  ExpectedResult := '<html><u></u>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenUnderline.CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><u></u></html>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenUnderline.AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><u>blah</u></html>';
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestOpenUnorderedList;
var
  TestResult, ExpectedResult: string;
begin

  ExpectedResult := '<html><ul></ul></html>';
  TestResult := HTMLWriterFactory(cHTML).OpenUnorderedList().CloseTag.CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := '<html><ul type="disc"></ul></html>';
  TestResult := HTMLWriterFactory(cHTML).OpenUnorderedList(bsDisc).CloseTag.CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := '<html><ul type="circle"></ul></html>';
  TestResult := HTMLWriterFactory(cHTML).OpenUnorderedList(bsCircle).CloseTag.CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := '<html><ul type="square"></ul></html>';
  TestResult := HTMLWriterFactory(cHTML).OpenUnorderedList(bsSquare).CloseTag.CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestOpenVariable;
var
  TestResult: string;
  ExpectedResult: string;
  TempTag: string;
begin
  TempTag := TFormatTypeStrings[ftVariable];

  TestResult := HTMLWriterFactory(cHTML).OpenVariable.AsHTML;
  ExpectedResult := Format('<html><%s', [TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenVariable.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenVariable.CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenVariable.AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s>blah</%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);
end;


procedure TestTHTMLWriter.TestOpenForm;
var
  TestResult: string;
  ExpectedResult: string;
  TempTag: string;
  TempURL: string;
begin
  TempTag := cForm;

  TestResult := HTMLWriterFactory(cHTML).OpenForm.AsHTML;
  ExpectedResult := Format('<html><%s method="get"', [TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenForm.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s method="get"></%s>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenForm.CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s method="get"></%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenForm.AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s method="get">blah</%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TempURL := 'http://www.nickhodges.com';
  TestResult := HTMLWriterFactory(cHTML).OpenForm(TempURL).AsHTML;
  ExpectedResult := Format('<html><%s action="%s" method="get"', [TempTag, TempURL]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenForm(TempURL).CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s action="%s" method="get"></%s>', [TempTag, TempURL, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenForm(TempURL).CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s action="%s" method="get"></%s></html>', [TempTag, TempURL, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenForm(TempURL).AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s action="%s" method="get">blah</%s></html>', [TempTag, TempURL, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestTableBody;
var
  TestResult: string;
  ExpectedResult: string;
begin
  TestResult := HTMLWriterFactory(cHTML).OpenTable.OpenTableBody.OpenTableRow.AddTableData('blah').CloseTag().CloseTag().CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><table><tbody><tr><td>blah</td></tr></tbody></table></html>';
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestTableFoot;
var
  TestResult: string;
  ExpectedResult: string;
begin
  TestResult := HTMLWriterFactory(cHTML).OpenTable.OpenTableFoot.OpenTableRow.AddTableData('blah').CloseTag().CloseTag().CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><table><tfoot><tr><td>blah</td></tr></tfoot></table></html>';
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestTableHead;
var
  TestResult: string;
  ExpectedResult: string;
begin
  TestResult := HTMLWriterFactory(cHTML).OpenTable.OpenTableHead.OpenTableRow.AddTableData('blah').CloseTag().CloseTag().CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><table><thead><tr><td>blah</td></tr></thead></table></html>';
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestThatExceptionsAreRaised;
var
  TestResult: string;
begin
  CheckException(ECannotAddDefItemWithoutDefTermHTMLWriterException, procedure()begin TestResult := HTMLWriterFactory(cHTML).OpenDefinitionList.OpenDefinitionItem.CloseTag.AsHTML; end, 'Failed to raise ECannotAddDefItemWithoutDefTermHTMLWriterException when trying to add a <dd> tag that doesn''t follow a <dt> tag or another <dd> tag');

  CheckException(ECannotAddDefItemWithoutDefTermHTMLWriterException, procedure()begin TestResult := HTMLWriterFactory(cHTML).OpenDefinitionList.OpenDefinitionItem.CloseTag.AsHTML; end, 'Failed to raise ECannotAddDefItemWithoutDefTermHTMLWriterException when trying to add a <dd> tag that doesn''t follow a <dt> tag or another <dd> tag');

  CheckException(ECannotNestDefinitionListsHTMLWriterException, procedure()begin TestResult := HTMLWriterFactory(cHTML).OpenDefinitionList.OpenDefinitionList.CloseTag.AsHTML; end, 'Failed to raise ECannotNestDefinitionListsHTMLWriterException when trying to nest a <dl> tag in another <dl> tag.');

  CheckException(ENotInDefinitionListHTMLError, procedure()begin TestResult := HTMLWriterFactory(cHTML).OpenDefinitionTerm.CloseTag.AsHTML; end, 'Failed to raise ENotInDefinitionListHTMLError when trying to add a <dt> tag when a <dl> tag is not open.');

  CheckException(ENotInTableTagException, procedure()begin TestResult := HTMLWriterFactory(cHTML).OpenBold.OpenTableHead.CloseTag.AsHTML; end, 'Failed to raise ETableTagNotOpenHTMLWriterException when trying to add a <thead> tag when a <table> tag is not open.');

  CheckException(ENotInTableTagException, procedure()begin TestResult := HTMLWriterFactory(cHTML).OpenBold.OpenTableFoot.CloseTag.AsHTML; end, 'Failed to raise ETableTagNotOpenHTMLWriterException when trying to add a <tfoot> tag when a <table> tag is not open.');

  CheckException(ENotInTableTagException, procedure()begin TestResult := HTMLWriterFactory(cHTML).OpenBold.OpenTableBody.CloseTag.AsHTML; end, 'Failed to raise ETableTagNotOpenHTMLWriterException when trying to add a <tbody> tag when a <table> tag is not open.');

  CheckException(ENotInTableTagException, procedure()begin TestResult := HTMLWriterFactory(cHTML).OpenBold.OpenTable.OpenTableHeader.CloseTag.AsHTML; end, 'Failed to raise ETableTagNotOpenHTMLWriterException when trying to add a <th> tag when a <table> tag is not open.');

  CheckException(ETableTagNotOpenHTMLWriterException, procedure()begin TestResult := HTMLWriterFactory(cHTML).OpenBold.OpenCaption.CloseTag.AsHTML; end, 'Failed to raise ETableTagNotOpenHTMLWriterException when trying to add a <caption> tag when <table> is not the current tag.');

  CheckException(EBadTagAfterTableContentHTMLWriter, procedure()begin TestResult := HTMLWriterFactory(cHTML).OpenTable.OpenTableRow.OpenCaption.CloseTag.AsHTML; end, 'Failed to raise ETableTagNotOpenHTMLWriterException when trying to add a <caption> tag when <table> is not the current tag.');

  CheckException(ECaptionMustBeFirstHTMLWriterException, procedure()begin TestResult := HTMLWriterFactory(cHTML).OpenTable.OpenCol.OpenCaption.CloseTag.CloseTag.CloseTag.AsHTML; end, 'Failed to raise ENoCaptionAfterColElementHTMLWriterException when trying to add a <caption> tag after a <col> tag.');

  CheckException(ENotInCommentTagException, procedure()begin TestResult := HTMLWriterFactory(cHTML).OpenBody.CloseComment.CloseTag.AsHTML; end, 'Failed to raise an exception when closing a comment outside of a comment tag. ');

  CheckException(ENotInSelectTextHTMLWriterException, procedure()begin TestResult := HTMLWriterFactory(cHTML).OpenOption.CloseTag().CloseTag().AsHTML end, 'Failed to raise ENotInSelectTextHTMLWriterException when calling OpenOptGroup outside of an open <select> tag. ');

  CheckException(ENotInSelectTextHTMLWriterException, procedure()begin TestResult := HTMLWriterFactory(cHTML).OpenOptGroup('hergrad').CloseTag().CloseTag().AsHTML end, 'Failed to raise ENotInSelectTextHTMLWriterException when calling OpenOptGroup outside of an open <select> tag. ');

  CheckException(ENotInFormTagHTMLException, procedure()begin TestResult := HTMLWriterFactory(cHTML).OpenSelect('hergrad').CloseTag().CloseTag().AsHTML end, 'Failed to raise ENotInFormTagHTMLException when calling OpenSelect outside of an open <form> tag. ');

  CheckException(ENotInFormTagHTMLException, procedure()begin TestResult := HTMLWriterFactory(cHTML).OpenTextArea('hergrad', 32, 55).CloseTag().CloseTag().AsHTML end, 'Failed to raise ENotInFormTagHTMLException when calling OpenTextArea outside of an open <form> tag. ');

  CheckException(EParamNameRequiredHTMLWriterException, procedure()begin TestResult := HTMLWriterFactory(cHTML).OpenObject.OpenParam('').CloseTag.CloseTag.AsHTML; end, 'Failed to raise EParamNameRequiredHTMLWriterException when trying to add a <param> with an empty name');

  CheckException(ENotInFormTagHTMLException, procedure()begin TestResult := HTMLWriterFactory(cHTML).OpenButton('buttonname').CloseTag.CloseTag.AsHTML; end, 'Failed to raise ENotInFormTagHTMLException when trying to add an attribute to a closed tag.');

  CheckException(EHeadTagRequiredHTMLException, procedure()begin TestResult := HTMLWriterFactory(cHTML).AddMetaNamedContent('This', 'That').CloseTag.AsHTML; end, 'Failed to raise EHeadTagRequiredHTMLException when adding <meta> tag outside <head> tag');

  CheckException(ENotInListTagException, procedure()begin TestResult := HTMLWriterFactory(cHTML).OpenListItem.CloseTag.AsHTML; end, 'Properly called ENotInListTagException when outside of a list.  All is well.');

  CheckException(ENotInTableTagException, procedure()begin TestResult := HTMLWriterFactory(cHTML).AddTableData('gremter').CloseTag.AsHTML; end, 'Failed to raise ENotInTableTagException when trying to add a Table Row outside of a table');

  CheckException(ENotInTableTagException, procedure()begin TestResult := HTMLWriterFactory(cHTML).AddTableData('gremter').CloseTag.AsHTML; end, 'Failed to raise ENotInTableTagException when trying to add a Table Row outside of a table');

  CheckException(EClosingDocumentWithOpenTagsHTMLException, procedure()begin TestResult := HTMLWriterFactory(cHTML).OpenBody.OpenBold.AddText('thurd').CloseTag.CloseDocument.CloseTag.AsHTML; end, 'Failed to raise EClosingDocumentWithOpenTagsHTMLException when closing a document with tags open.');

  CheckException(ENotInFrameSetHTMLException, procedure()begin TestResult := HTMLWriterFactory(cHTML).OpenFrame.CloseTag.AsHTML; end, 'Failed to raise ENotInFrameSetHTMLException when trying to add a frame outside of a frameset');

  CheckException(ENotInMapTagHTMLException, procedure()begin TestResult := HTMLWriterFactory(cHTML).OpenArea('hertgrab').CloseTag.AsHTML; end, 'Failed to raise ENotInMapTagHTMLException when trying to add an area outside of a map tag');

  CheckException(ENotInFormTagHTMLException, procedure()begin TestResult := HTMLWriterFactory(cHTML).OpenInput.CloseTag.AsHTML; end, 'Failed to raise ENotInFormTagHTMLException when trying to add an <input> outside of a <form>');

  CheckException(ENotInObjectTagException, procedure()begin TestResult := HTMLWriterFactory(cHTML).OpenParam('herdle').CloseTag.AsHTML; end, 'Failed to raise ENotInObjectTagException when trying to add an <param> outside of a <object>');

  CheckException(EOpenTagRequiredHTMLWriterException, procedure()begin TestResult := HTMLWriterFactory(cHTML).OpenBold.CloseTag.AddAttribute('grastin').AsHTML; end, 'Failed to raise EHTMLWriterOpenTagRequiredException when trying to add an attribute to a closed tag.');

  CheckException(ETableTagNotOpenHTMLWriterException, procedure()begin TestResult := HTMLWriterFactory(cHTML).OpenColGroup.CloseTag.AsHTML; end, 'Failed to raise ETableTagNotOpenHTMLWriterException when trying to add a <colgroup> tag when <table> is not the current tag.');

  CheckException(ECaptionMustBeFirstHTMLWriterException, procedure()begin TestResult := HTMLWriterFactory(cHTML).OpenTable.OpenColGroup.OpenCaption.CloseTag.CloseTag.AsHTML; end, 'Failed to raise ECaptionMustBeFirstHTMLWriterException when trying to add a <caption> tag when <table> is not the current tag.');

  CheckException(EBadTagAfterTableContentHTMLWriter, procedure()begin TestResult := HTMLWriterFactory(cHTML).OpenTable.OpenTableRow.OpenColGroup.OpenCaption.CloseTag.CloseTag.AsHTML; end, 'Failed to raise EBadTagAfterTableContentHTMLWriter when trying to add a <colgroup> tag when there is alreatdy table content.');

  CheckException(ETableTagNotOpenHTMLWriterException, procedure()begin TestResult := HTMLWriterFactory(cHTML).OpenCol.CloseTag.CloseTag.AsHTML; end, 'Failed to raise EColMustComeHaveOpenTableHTMLWriter when trying to add a <col> tag when a <table> tag is not open.');

end;

procedure TestTHTMLWriter.TestTHTMLWidth1;
var
  TempWidth: THTMLWidth;
  ExpectedResult: string;
  TestResult: string;
begin
  TempWidth.IsPercentage := ipIsNotPercentage;
  TempWidth.Width := 42;
  ExpectedResult := '';
  TestResult := TempWidth.AsPercentage;
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestTHTMLWidth2;
var
  TempWidth: THTMLWidth;
  ExpectedResult: string;
  TestResult: string;
begin
  TempWidth.Width := 42;
  TempWidth.IsPercentage := ipIsPercentage;
  ExpectedResult := '42%';
  TestResult := TempWidth.AsPercentage;
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestOpenListItem;
var
  TestResult, ExpectedResult: string;
  Temp: string;
begin
  Temp := 'bloople';

  ExpectedResult := '<html><ul><li></li></ul></html>';
  TestResult := HTMLWriterFactory(cHTML).OpenUnorderedList().OpenListItem.CloseTag.CloseTag.CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := '<html><ul type="disc"><li></li></ul></html>';
  TestResult := HTMLWriterFactory(cHTML).OpenUnorderedList(bsDisc).OpenListItem.CloseTag.CloseTag.CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := '<html><ul type="circle"><li></li></ul></html>';
  TestResult := HTMLWriterFactory(cHTML).OpenUnorderedList(bsCircle).OpenListItem.CloseTag.CloseTag.CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := '<html><ul type="square"><li></li></ul></html>';
  TestResult := HTMLWriterFactory(cHTML).OpenUnorderedList(bsSquare).OpenListItem.CloseTag.CloseTag.CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := Format('<html><ul type="square"><li>%s</li></ul></html>', [Temp]);
  TestResult := HTMLWriterFactory(cHTML).OpenUnorderedList(bsSquare).OpenListItem.AddText(Temp).CloseTag.CloseTag.CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := Format('<html><ul type="square"><li type="zoob">%s</li></ul></html>', [Temp]);
  TestResult := HTMLWriterFactory(cHTML).OpenUnorderedList(bsSquare).OpenListItem.AddAttribute('type', 'zoob').AddText(Temp).CloseTag.CloseTag.CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  CheckException(ENotInListTagException, procedure()begin TestResult := HTMLWriterFactory(cHTML).OpenBody.OpenDiv.OpenListItem.CloseList.CloseTag.CloseTag.CloseTag.AsHTML; end, 'Failed to see that a list item was being added outside a list');

end;

procedure TestTHTMLWriter.TestAddListItem;
var
  TestResult, ExpectedResult: string;
  Temp: string;
begin
  Temp := 'bloople';

  ExpectedResult := Format('<html><ul type="square"><li>%s</li></ul></html>', [Temp]);
  TestResult := HTMLWriterFactory(cHTML).OpenUnorderedList(bsSquare).AddListItem(Temp).CloseTag.CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.CheckException(aExceptionType: TClassOfException; aCode: TTestCode; const aMessage: String);
var
  WasException: Boolean;
begin
  WasException := False;
  try
    aCode;
  except
    on E: Exception do
    begin
      if E is aExceptionType then
      begin
        WasException := True;
      end;
    end;
  end;
  Check(WasException, aMessage);
end;

procedure TestTHTMLWriter.CheckExceptionNotRaised(aExceptionType: TClassOfException; aCode: TTestCode; const aMessage: String);
var
  WasException: Boolean;
begin
  WasException := False;
  try
    aCode;
  except
    on E: Exception do
    begin
      if E is aExceptionType then
      begin
        WasException := True;
      end;
    end;
  end;
  Check(WasException, aMessage);
end;

function TestTHTMLWriter.HTML(aString: string): string;
begin
  Result := Format('<html>%s</html>', [aString]);
end;

function TestTHTMLWriter.HTMLWriterFactory(aTagName: string): IHTMLWriter;
begin
  if aTagName = cHTML then
  begin
    Result := HTMLWriterCreateDocument;
  end
  else
  begin
    Result := HTMLWriterCreate(aTagName);
  end;
end;

procedure TestTHTMLWriter.TestAddBlockQuoteText;
var
  TestResult, ExpectedResult: string;
  TempString: string;
begin
  TempString := 'grundle';

  ExpectedResult := '<html><blockquote>' + TempString + '</blockquote>';
  TestResult := HTMLWriterFactory(cHTML).AddBlockQuoteText(TempString).AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := HTML('<blockquote>' + TempString + '</blockquote>');
  TestResult := HTMLWriterFactory(cHTML).AddBlockQuoteText(TempString).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestAddBoldText;
var
  TestResult, ExpectedResult: string;
  TempString: string;
begin
  TempString := 'grundle';

  ExpectedResult := '<html><b>' + TempString + '</b>';
  TestResult := HTMLWriterFactory(cHTML).AddBoldText(TempString).AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := HTML('<b>' + TempString + '</b>');
  TestResult := HTMLWriterFactory(cHTML).AddBoldText(TempString).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestAddInsertText;
var
  TestResult, ExpectedResult: string;
  TempString: string;
begin
  TempString := 'grundle';

  ExpectedResult := '<html><ins>' + TempString + '</ins>';
  TestResult := HTMLWriterFactory(cHTML).AddInsertText(TempString).AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := HTML('<ins>' + TempString + '</ins>');
  TestResult := HTMLWriterFactory(cHTML).AddInsertText(TempString).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestAddItalicText;
var
  TestResult, ExpectedResult: string;
  TempString: string;
begin
  TempString := 'grundle';

  ExpectedResult := '<html><i>' + TempString + '</i>';
  TestResult := HTMLWriterFactory(cHTML).AddItalicText(TempString).AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := HTML('<i>' + TempString + '</i>');
  TestResult := HTMLWriterFactory(cHTML).AddItalicText(TempString).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestAddKeyboardText;
var
  TestResult, ExpectedResult: string;
  TempString: string;
  TempTag: string;
begin
  TempString := 'grundle';
  TempTag := TFormatTypeStrings[ftKeyboard];

  ExpectedResult := Format('<html><%s>%s</%s>', [TempTag, TempString, TempTag]);
  TestResult := HTMLWriterFactory(cHTML).AddKeyboardText(TempString).AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := HTML(Format('<%s>%s</%s>', [TempTag, TempString, TempTag]));
  TestResult := HTMLWriterFactory(cHTML).AddKeyboardText(TempString).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestAddLineBreak;
var
  TestResult: string;
  ExpectedResult: string;
begin
  ExpectedResult := HTML('<br />');
  TestResult := HTMLWriterFactory(cHTML).AddLineBreak().CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := HTML('<br>');
  TestResult := HTMLWriterFactory(cHTML).AddLineBreak(cvNoValue, ietIsNotEmptyTag).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := HTML('<br clear="left">');
  TestResult := HTMLWriterFactory(cHTML).AddLineBreak(cvLeft, ietIsNotEmptyTag).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := HTML('<br clear="left" />');
  TestResult := HTMLWriterFactory(cHTML).AddLineBreak(cvLeft, ietIsEmptyTag).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestAddLink;
var
  TestResult: string;
  ExpectedResult: string;
  TempTag: string;
  TempName: string;
begin
  TempTag := cLink;

  TestResult := HTMLWriterFactory(cHTML).OpenHead.OpenLink.AsHTML;
  ExpectedResult := Format('<html><head><%s', [TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenHead.OpenLink.CloseTag.AsHTML;
  ExpectedResult := Format('<html><head><%s />', [TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenHead.OpenLink.CloseTag.CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><head><%s /></head></html>', [TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TempName := 'Verdana';
  TestResult := HTMLWriterFactory(cHTML).OpenHead.OpenLink.AddAttribute('face', TempName).CloseTag.CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><head><%s face="%s" /></head></html>', [TempTag, TempName, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestAddAnchor;
var
  TestResult: string;
  ExpectedResult: string;
  TempText: string;
const
  TempHREF = 'http://www.nickhodges.com';
begin
  TempText := 'Nick Hodges';
  ExpectedResult := Format(HTML('<a href="%s">%s</a>'), [TempHREF, TempText]);
  TestResult := HTMLWriterFactory(cHTML).AddAnchor(TempHREF, TempText).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  TempText := 'scaffer';
  ExpectedResult := Format(HTML('<a name="%s">%s</a>'), [TempText, TempText]);
  TestResult := HTMLWriterFactory(cHTML).OpenAnchor[cName, TempText].AddText(TempText).CloseTag.CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestAddMetaNamedContent;
var
  TestResult, ExpectedResult: string;
  TempName: string;
  TempContent: string;
  Temp: IHTMLWriter;
begin
  TempName := 'Snerdo';
  TempContent := 'derfle';
  ExpectedResult := '<html><head><meta name="%s" content="%s" /></head></html>';
  ExpectedResult := Format(ExpectedResult, [TempName, TempContent]);
  Temp := HTMLWriterFactory(cHTML);
  Temp := Temp.OpenHead;
  Temp := Temp.OpenMeta;
  Temp := Temp.AddMetaNamedContent(TempName, TempContent);
  Temp := Temp.CloseTag;
  Temp := Temp.CloseTag;
  Temp := Temp.CloseTag;
  TestResult := Temp.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestAddUnderlinedText;
var
  TestResult, ExpectedResult: string;
  TempString: string;
begin
  TempString := 'grundle';

  ExpectedResult := '<html><u>' + TempString + '</u>';
  TestResult := HTMLWriterFactory(cHTML).AddUnderlinedText(TempString).AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := HTML('<u>' + TempString + '</u>');
  TestResult := HTMLWriterFactory(cHTML).AddUnderlinedText(TempString).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestAddVariableText;
var
  TestResult, ExpectedResult: string;
  TempString: string;
  TempTag: string;
begin
  TempString := 'grundle';
  TempTag := TFormatTypeStrings[ftVariable];

  ExpectedResult := Format('<html><%s>%s</%s>', [TempTag, TempString, TempTag]);
  TestResult := HTMLWriterFactory(cHTML).AddVariableText(TempString).AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := HTML(Format('<%s>%s</%s>', [TempTag, TempString, TempTag]));
  TestResult := HTMLWriterFactory(cHTML).AddVariableText(TempString).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestAddEmphasisText;
var
  TestResult, ExpectedResult: string;
  TempString: string;
  TempTag: string;
begin
  TempString := 'grundle';
  TempTag := 'em';

  ExpectedResult := Format('<html><%s>%s</%s>', [TempTag, TempString, TempTag]);
  TestResult := HTMLWriterFactory(cHTML).AddEmphasisText(TempString).AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := HTML(Format('<%s>%s</%s>', [TempTag, TempString, TempTag]));
  TestResult := HTMLWriterFactory(cHTML).AddEmphasisText(TempString).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestAddFontText;
var
  TestResult, ExpectedResult: string;
  TempString: string;
  TempTag: string;
begin
  TempString := 'grundle';
  TempTag := 'font';

  ExpectedResult := Format('<html><%s>%s</%s>', [TempTag, TempString, TempTag]);
  TestResult := HTMLWriterFactory(cHTML).AddFontText(TempString).AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := HTML(Format('<%s>%s</%s>', [TempTag, TempString, TempTag]));
  TestResult := HTMLWriterFactory(cHTML).AddFontText(TempString).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestAddStrikeText;
var
  TestResult, ExpectedResult: string;
  TempString: string;
  TempTag: string;
begin
  TempString := 'grundle';
  TempTag := TFormatTypeStrings[ftStrike];

  ExpectedResult := Format('<html><%s>%s</%s>', [TempTag, TempString, TempTag]);
  TestResult := HTMLWriterFactory(cHTML).AddStrikeText(TempString).AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := HTML(Format('<%s>%s</%s>', [TempTag, TempString, TempTag]));
  TestResult := HTMLWriterFactory(cHTML).AddStrikeText(TempString).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestAddStrongText;
var
  TestResult, ExpectedResult: string;
  TempString: string;
  TempTag: string;
begin
  TempString := 'grundle';
  TempTag := 'strong';

  ExpectedResult := Format('<html><%s>%s</%s>', [TempTag, TempString, TempTag]);
  TestResult := HTMLWriterFactory(cHTML).AddStrongText(TempString).AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := HTML(Format('<%s>%s</%s>', [TempTag, TempString, TempTag]));
  TestResult := HTMLWriterFactory(cHTML).AddStrongText(TempString).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestAddAcronymText;
var
  TestResult, ExpectedResult: string;
  TempString: string;
  TempTag: string;
begin
  TempString := 'grundle';
  TempTag := TFormatTypeStrings[ftAcronym];

  ExpectedResult := Format('<html><%s>%s</%s>', [TempTag, TempString, TempTag]);
  TestResult := HTMLWriterFactory(cHTML).AddAcronymText(TempString).AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := HTML(Format('<%s>%s</%s>', [TempTag, TempString, TempTag]));
  TestResult := HTMLWriterFactory(cHTML).AddAcronymText(TempString).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestAddAddressText;
var
  TestResult, ExpectedResult: string;
  TempString: string;
  TempTag: string;
begin
  TempString := 'grundle';
  TempTag := TFormatTypeStrings[ftAddress];

  ExpectedResult := Format('<html><%s>%s</%s>', [TempTag, TempString, TempTag]);
  TestResult := HTMLWriterFactory(cHTML).AddAddressText(TempString).AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := HTML(Format('<%s>%s</%s>', [TempTag, TempString, TempTag]));
  TestResult := HTMLWriterFactory(cHTML).AddAddressText(TempString).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestAddBase;
var
  TestResult, ExpectedResult: string;
  Temp: string;
  TempTarget: TTargetType;
  TempWriter: IHTMLWriter;
const
  TempURL = 'http://www.nickhodges.com';
begin
  ExpectedResult := Format(HTML('<head><base /></head>'), [TempURL]);
  TempWriter := HTMLWriterFactory(cHTML).OpenHead.OpenBase;
  TestResult := TempWriter.CloseTag.CloseTag.CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := Format(HTML('<head><base href="%s" /></head>'), [TempURL]);
  TestResult := HTMLWriterFactory(cHTML).OpenHead.AddBase(TempURL).CloseTag.CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := Format(HTML('<head><base target="%s" /></head>'), [TTargetTypeStrings[ttBlank]]);
  TestResult := HTMLWriterFactory(cHTML).OpenHead.AddBase(ttBlank).CloseTag.CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  for TempTarget := ttBlank to ttTop do
  begin
    ExpectedResult := Format(HTML('<head><base target="%s" /></head>'), [TTargetTypeStrings[TempTarget]]);
    TestResult := HTMLWriterFactory(cHTML).OpenHead.AddBase(TempTarget).CloseTag.CloseTag.AsHTML;
    CheckEquals(ExpectedResult, TestResult);
  end;

  Temp := 'flater';
  ExpectedResult := Format(HTML('<head><base target="%s" /></head>'), [Temp]);
  TestResult := HTMLWriterFactory(cHTML).OpenHead.AddBase(ttFrameName, Temp).CloseTag.CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestAddBDOText;
var
  TestResult, ExpectedResult: string;
  TempString: string;
  TempTag: string;
begin
  TempString := 'grundle';
  TempTag := TFormatTypeStrings[ftBDO];

  ExpectedResult := Format('<html><%s>%s</%s>', [TempTag, TempString, TempTag]);
  TestResult := HTMLWriterFactory(cHTML).AddBDOText(TempString).AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := HTML(Format('<%s>%s</%s>', [TempTag, TempString, TempTag]));
  TestResult := HTMLWriterFactory(cHTML).AddBDOText(TempString).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestAddBigText;
var
  TestResult, ExpectedResult: string;
  TempString: string;
  TempTag: string;
begin
  TempString := 'grundle';
  TempTag := TFormatTypeStrings[ftBig];

  ExpectedResult := Format('<html><%s>%s</%s>', [TempTag, TempString, TempTag]);
  TestResult := HTMLWriterFactory(cHTML).AddBigText(TempString).AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := HTML(Format('<%s>%s</%s>', [TempTag, TempString, TempTag]));
  TestResult := HTMLWriterFactory(cHTML).AddBigText(TempString).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestAddAbbreviationText;
var
  TestResult, ExpectedResult: string;
  TempString: string;
  TempTag: string;
begin
  TempString := 'grundle';
  TempTag := TFormatTypeStrings[ftAbbreviation];

  ExpectedResult := Format('<html><%s>%s</%s>', [TempTag, TempString, TempTag]);
  TestResult := HTMLWriterFactory(cHTML).AddAbbreviationText(TempString).AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := HTML(Format('<%s>%s</%s>', [TempTag, TempString, TempTag]));
  TestResult := HTMLWriterFactory(cHTML).AddAbbreviationText(TempString).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestAddPreformattedText;
var
  TestResult, ExpectedResult: string;
  TempString: string;
  TempTag: string;
begin
  TempString := 'grundle';
  TempTag := TFormatTypeStrings[ftPreformatted];

  ExpectedResult := Format('<html><%s>%s</%s>', [TempTag, TempString, TempTag]);
  TestResult := HTMLWriterFactory(cHTML).AddPreformattedText(TempString).AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := HTML(Format('<%s>%s</%s>', [TempTag, TempString, TempTag]));
  TestResult := HTMLWriterFactory(cHTML).AddPreformattedText(TempString).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestAddQuotationText;
var
  TestResult, ExpectedResult: string;
  TempString: string;
  TempTag: string;
begin
  TempString := 'grundle';
  TempTag := TFormatTypeStrings[ftQuotation];

  ExpectedResult := Format('<html><%s>%s</%s>', [TempTag, TempString, TempTag]);
  TestResult := HTMLWriterFactory(cHTML).AddQuotationText(TempString).AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := HTML(Format('<%s>%s</%s>', [TempTag, TempString, TempTag]));
  TestResult := HTMLWriterFactory(cHTML).AddQuotationText(TempString).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestAddCenterText;
var
  TestResult, ExpectedResult: string;
  TempString: string;
  TempTag: string;
begin
  TempString := 'brethwast';
  TempTag := 'center';

  ExpectedResult := Format('<html><%s>%s</%s>', [TempTag, TempString, TempTag]);
  TestResult := HTMLWriterFactory(cHTML).AddCenterText(TempString).AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := HTML(Format('<%s>%s</%s>', [TempTag, TempString, TempTag]));
  TestResult := HTMLWriterFactory(cHTML).AddCenterText(TempString).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestAddCitationText;
var
  TestResult, ExpectedResult: string;
  TempString: string;
  TempTag: string;
begin
  TempString := 'Mertper';
  TempTag := TFormatTypeStrings[ftCitation];

  ExpectedResult := Format('<html><%s>%s</%s>', [TempTag, TempString, TempTag]);
  TestResult := HTMLWriterFactory(cHTML).AddCitationText(TempString).AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := HTML(Format('<%s>%s</%s>', [TempTag, TempString, TempTag]));
  TestResult := HTMLWriterFactory(cHTML).AddCitationText(TempString).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestDefinitionListStuff;
var
  TestResult, ExpectedResult: string;
  TempTag: string;
begin
  TempTag := cDL;
  ExpectedResult := Format('<html><%s', [TempTag]);
  TestResult := HTMLWriterFactory(cHTML).OpenDefinitionList.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := HTML(Format('<%s></%s>', [TempTag, TempTag]));
  TestResult := HTMLWriterFactory(cHTML).OpenDefinitionList.CloseTag.CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  TempTag := cDT;
  ExpectedResult := HTML(Format('<dl><%s></%s></dl>', [TempTag, TempTag]));
  TestResult := HTMLWriterFactory(cHTML).OpenDefinitionList.OpenDefinitionTerm.CloseTag.CloseTag.CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  TempTag := cDD;
  ExpectedResult := HTML(Format('<dl><dt></dt><%s></%s></dl>', [TempTag, TempTag]));
  TestResult := HTMLWriterFactory(cHTML).OpenDefinitionList.OpenDefinitionTerm.CloseTag.OpenDefinitionItem.CloseTag.CloseTag.CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  TempTag := cDD;
  ExpectedResult := HTML(Format('<dl><dt></dt><%s></%s><%s></%s></dl>', [TempTag, TempTag, TempTag, TempTag]));
  TestResult := HTMLWriterFactory(cHTML).OpenDefinitionList.OpenDefinitionTerm.CloseTag.OpenDefinitionItem.CloseTag.OpenDefinitionItem.CloseTag.CloseTag.CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  TempTag := cDD;
  ExpectedResult := HTML(Format('<dl><dt></dt><%s></%s><%s></%s><dt></dt><%s></%s></dl>', [TempTag, TempTag, TempTag, TempTag, TempTag, TempTag]));
  TestResult := HTMLWriterFactory(cHTML).OpenDefinitionList.OpenDefinitionTerm.CloseTag.OpenDefinitionItem.CloseTag.OpenDefinitionItem.CloseTag.OpenDefinitionTerm.CloseTag.OpenDefinitionItem.CloseTag.CloseTag.CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestOpenHeading1;
var
  TestResult: string;
  ExpectedResult: string;
begin
  TestResult := HTMLWriterFactory(cHTML).OpenHeading1.AsHTML;
  ExpectedResult := '<html><h1';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenHeading1.CloseTag.AsHTML;
  ExpectedResult := '<html><h1></h1>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenHeading1.CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><h1></h1></html>';
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenHeading1.AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := '<html><h1>blah</h1></html>';
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestOpenHeading2;
var
  TestResult: string;
  ExpectedResult: string;
  TempTag: string;
begin
  TempTag := 'h2';
  TestResult := HTMLWriterFactory(cHTML).OpenHeading2.AsHTML;
  ExpectedResult := Format('<html><%s', [TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenHeading2.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s>', [TempTag, TempTag]); ;
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenHeading2.CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenHeading2.AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s>blah</%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestOpenHeading3;
var
  TestResult: string;
  ExpectedResult: string;
  TempTag: string;
begin
  TempTag := 'h3';
  TestResult := HTMLWriterFactory(cHTML).OpenHeading3.AsHTML;
  ExpectedResult := Format('<html><%s', [TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenHeading3.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s>', [TempTag, TempTag]); ;
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenHeading3.CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenHeading3.AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s>blah</%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestOpenHeading4;
var
  TestResult: string;
  ExpectedResult: string;
  TempTag: string;
begin
  TempTag := 'h4';
  TestResult := HTMLWriterFactory(cHTML).OpenHeading4.AsHTML;
  ExpectedResult := Format('<html><%s', [TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenHeading4.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s>', [TempTag, TempTag]); ;
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenHeading4.CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenHeading4.AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s>blah</%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestOpenHeading5;
var
  TestResult: string;
  ExpectedResult: string;
  TempTag: string;
begin
  TempTag := 'h5';
  TestResult := HTMLWriterFactory(cHTML).OpenHeading5.AsHTML;
  ExpectedResult := Format('<html><%s', [TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenHeading5.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s>', [TempTag, TempTag]); ;
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenHeading5.CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenHeading5.AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s>blah</%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestOpenHeading6;
var
  TestResult: string;
  ExpectedResult: string;
  TempTag: string;
begin
  TempTag := 'h6';
  TestResult := HTMLWriterFactory(cHTML).OpenHeading6.AsHTML;
  ExpectedResult := Format('<html><%s', [TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenHeading6.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s>', [TempTag, TempTag]); ;
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenHeading6.CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenHeading6.AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s>blah</%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestAddHeading1Text;
var
  TestResult, ExpectedResult: string;
  TempString: string;
  TempTag: string;
begin
  TempString := 'grundle';
  TempTag := 'h1';

  ExpectedResult := Format('<html><%s>%s</%s>', [TempTag, TempString, TempTag]);
  TestResult := HTMLWriterFactory(cHTML).AddHeading1Text(TempString).AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := HTML(Format('<%s>%s</%s>', [TempTag, TempString, TempTag]));
  TestResult := HTMLWriterFactory(cHTML).AddHeading1Text(TempString).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestAddHeading2Text;
var
  TestResult, ExpectedResult: string;
  TempString: string;
  TempTag: string;
begin
  TempString := 'grundle';
  TempTag := 'h2';

  ExpectedResult := Format('<html><%s>%s</%s>', [TempTag, TempString, TempTag]);
  TestResult := HTMLWriterFactory(cHTML).AddHeading2Text(TempString).AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := HTML(Format('<%s>%s</%s>', [TempTag, TempString, TempTag]));
  TestResult := HTMLWriterFactory(cHTML).AddHeading2Text(TempString).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestAddHeading3Text;
var
  TestResult, ExpectedResult: string;
  TempString: string;
  TempTag: string;
begin
  TempString := 'grundle';
  TempTag := 'h3';

  ExpectedResult := Format('<html><%s>%s</%s>', [TempTag, TempString, TempTag]);
  TestResult := HTMLWriterFactory(cHTML).AddHeading3Text(TempString).AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := HTML(Format('<%s>%s</%s>', [TempTag, TempString, TempTag]));
  TestResult := HTMLWriterFactory(cHTML).AddHeading3Text(TempString).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestAddHeading4Text;
var
  TestResult, ExpectedResult: string;
  TempString: string;
  TempTag: string;
begin
  TempString := 'grundle';
  TempTag := 'h4';

  ExpectedResult := Format('<html><%s>%s</%s>', [TempTag, TempString, TempTag]);
  TestResult := HTMLWriterFactory(cHTML).AddHeading4Text(TempString).AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := HTML(Format('<%s>%s</%s>', [TempTag, TempString, TempTag]));
  TestResult := HTMLWriterFactory(cHTML).AddHeading4Text(TempString).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestAddHeading5Text;
var
  TestResult, ExpectedResult: string;
  TempString: string;
  TempTag: string;
begin
  TempString := 'grundle';
  TempTag := 'h5';

  ExpectedResult := Format('<html><%s>%s</%s>', [TempTag, TempString, TempTag]);
  TestResult := HTMLWriterFactory(cHTML).AddHeading5Text(TempString).AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := HTML(Format('<%s>%s</%s>', [TempTag, TempString, TempTag]));
  TestResult := HTMLWriterFactory(cHTML).AddHeading5Text(TempString).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestAddHeading6Text;
var
  TestResult, ExpectedResult: string;
  TempString: string;
  TempTag: string;
begin
  TempString := 'grundle';
  TempTag := 'h6';

  ExpectedResult := Format('<html><%s>%s</%s>', [TempTag, TempString, TempTag]);
  TestResult := HTMLWriterFactory(cHTML).AddHeading6Text(TempString).AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := HTML(Format('<%s>%s</%s>', [TempTag, TempString, TempTag]));
  TestResult := HTMLWriterFactory(cHTML).AddHeading6Text(TempString).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestAddStyle;
var
  TestResult, ExpectedResult: string;
  TempStyle: string;
  TempString: string;
begin
  TempStyle := 'font-size: small';
  TempString := 'blooker';
  ExpectedResult := Format('<span style="%s"', [TempStyle]);
  TestResult := HTMLWriterFactory('span').AddStyle(TempStyle).AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := ExpectedResult + '>' + TempString;
  TestResult := HTMLWriterFactory('span').AddStyle(TempStyle).AddText(TempString).AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := ExpectedResult + '</span>';
  TestResult := HTMLWriterFactory('span').AddStyle(TempStyle).AddText(TempString).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestAddClass;
var
  TestResult, ExpectedResult: string;
  TempClassName: string;
begin
  TempClassName := 'harbie';

  ExpectedResult := Format('<html><span class="%s"', [TempClassName]);
  TestResult := HTMLWriterFactory(cHTML).OpenSpan.AddClass(TempClassName).AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := HTML(Format('<span class="%s"></span>', [TempClassName]));
  TestResult := HTMLWriterFactory(cHTML).OpenSpan.AddClass(TempClassName).CloseTag.CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestAddID;
var
  TestResult, ExpectedResult: string;
  TempClassName: string;
begin
  TempClassName := 'harbie';

  ExpectedResult := Format('<html><span id="%s"', [TempClassName]);
  TestResult := HTMLWriterFactory(cHTML).OpenSpan.AddID(TempClassName).AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := HTML(Format('<span id="%s"></span>', [TempClassName]));
  TestResult := HTMLWriterFactory(cHTML).OpenSpan.AddID(TempClassName).CloseTag.CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestAddIFrame;
var
  ExpectedResult: string;
  TestResult: string;
  Temp: string;
  TempAlt: string;
begin
  Temp := 'http://www.nickhodges.com';
  TempAlt := 'Hepger';
  ExpectedResult := Format(HTML('<iframe src="%s" width="42" height="300">%s</iframe>'), [Temp, TempAlt]);
  TestResult := HTMLWriterFactory(cHTML).AddIFrame(Temp, TempAlt, THTMLWidth.Create(42, ipIsNotPercentage), 300).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestAddAttribute;
var
  TestResult: string;
  TempTagName: string;
  TempAttributeName, TempAttributeValue: string;
  ExpectedResult: string;
begin
  TempTagName := 'treaster';
  TempAttributeName := 'thresa';
  TempAttributeValue := 'grenar';

  ExpectedResult := Format('<%s %s></%s>', [TempTagName, TempAttributeName, TempTagName]);
  TestResult := HTMLWriterFactory(TempTagName).AddAttribute(TempAttributeName).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := Format('<%s %s="%s"></%s>', [TempTagName, TempAttributeName, TempAttributeValue, TempTagName]);
  TestResult := HTMLWriterFactory(TempTagName).AddAttribute(TempAttributeName, TempAttributeValue).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestCloseTag;
var
  TestResult: string;
  TempTagName: string;
  ExpectedResult: string;
begin
  TempTagName := 'gretis';
  ExpectedResult := Format('<%s></%s>', [TempTagName, TempTagName]);
  TestResult := HTMLWriterFactory(TempTagName).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestConstructorException;
var
  TestResult: string;
begin
  CheckException(EEmptyTagHTMLWriterException, procedure()begin TestResult := HTMLWriterFactory('').CloseTag.AsHTML; end, 'Failed to raise EHTMLWriterEmptyTagException when passing an empty tag to constructor');
end;

procedure TestTHTMLWriter.TestCreateDocument;
var
  TestResult: string;
  ExpectedResult: string;
begin
  ExpectedResult := '<html></html>';
  TestResult := HTMLWriterCreateDocument.CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  ExpectedResult := THTMLDocTypeStrings[dtHTML401Strict] + '<html></html>';
  TestResult := HTMLWriterCreateDocument(dtHTML401Strict).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestCRLFIndent;
var
  TestResult: string;
  ExpectedResult: string;
  TempStr: string;
  TempWriter: IHTMLWriter;
begin
  TempStr := 'prittle';
  ExpectedResult := '<html>' + cCRLF + '  <b>' + cCRLF + '    ' + TempStr + cCRLF + '  </b>' + cCRLF + '</html>';
  TempWriter := HTMLWriterFactory(cHTML).CRLF.Indent(2).OpenBold.CRLF.Indent(4).AddText(TempStr).CRLF.Indent(2).CloseTag.CRLF.CloseTag;
  try
    TestResult := TempWriter.AsHTML;
    CheckEquals(ExpectedResult, TestResult);
  finally
    TempWriter.SaveToFile('c:\junk\text.txt');
  end;

end;

procedure TestTHTMLWriter.TestDeprecated;
// var
// Temp: IHTMLWriter;
begin
  // <font>
  CheckException(ETagIsDeprecatedHTMLWriterException, procedure()var Temp: IHTMLWriter; begin Temp := HTMLWriterFactory(cHTML); Temp.ErrorLevels := Temp.ErrorLevels + [elStrictHTML4]; Temp.OpenFont; end, 'Failed to raise ETagIsDeprecatedHTMLWriterException when trying to add a <font> when it was marked deprecated');

  // Negative test case for <font>
  // try
  // Temp := HTMLWriterFactory(cHTML);
  // Temp.ErrorLevels := [];
  // Temp := Temp.OpenFont;
  // Check(False, 'Did not raise ETagIsDeprecatedHTMLWriterException when trying to add a <font> when it was not marked deprecated');
  // except
  // on E: ETagIsDeprecatedHTMLWriterException do
  // begin
  // Check(False, 'Incorrectly called ETagIsDeprecatedHTMLWriterException when trying to add a <font> when it was marked deprecated');
  // end;
  // end;

end;

procedure TestTHTMLWriter.TestLoadSave;
var
  InString, OutString: string;
  Temp: IHTMLWriter;
const
  cFilename = 'test.html';
begin
  try
    Temp := HTMLWriterFactory(cHTML).OpenHead.AddTitle('This is the title').CloseTag.OpenBody.AddBoldText('This is bold').CloseTag.CloseTag;
    InString := Temp.AsHTML;
    Temp.SaveToFile(cFilename);
    Temp.LoadFromFile(cFilename);
    OutString := Temp.AsHTML;
    CheckEquals(OutString, InString);
  finally
    SysUtils.DeleteFile(cFilename);
  end;
end;

procedure TestTHTMLWriter.TestNonHTMLTag;
var
  TestResult: string;
  ExpectedResult: string;
  TempStr: string;
begin
  ExpectedResult := '<b></b>';
  TestResult := HTMLWriterCreate(TFormatTypeStrings[ftBold]).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

  TempStr := 'mashtes';
  ExpectedResult := Format('<b>%s</b>', [TempStr]);
  TestResult := HTMLWriterCreate(TFormatTypeStrings[ftBold]).AddText(TempStr).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestNoScript;
var
  TestResult: string;
  ExpectedResult: string;
  TempTag: string;
  TempColor: string;
begin
  TempTag := cNoScript;

  TestResult := HTMLWriterFactory(cHTML).OpenNoScript.AsHTML;
  ExpectedResult := Format('<html><%s', [TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenNoScript.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenNoScript.CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s></%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TestResult := HTMLWriterFactory(cHTML).OpenNoScript.AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s>blah</%s></html>', [TempTag, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

  TempColor := 'red';
  TestResult := HTMLWriterFactory(cHTML).OpenNoScript.AddAttribute('color', TempColor).AddText('blah').CloseTag.CloseTag.AsHTML;
  ExpectedResult := Format('<html><%s color="%s">blah</%s></html>', [TempTag, TempColor, TempTag]);
  CheckEquals(ExpectedResult, TestResult);

end;

procedure TestTHTMLWriter.TestAddSpanTextWithStyle;
var
  TempStyle: string;
  TempString: string;
  TestResult: string;
  ExpectedResult: string;
begin
  TempString := 'flooble';
  TempStyle := 'border-top:1px solid #c9d7f1;font-size:1px';
  ExpectedResult := HTML(Format('<span style="%s">%s</span>', [TempStyle, TempString]));
  TestResult := HTMLWriterFactory(cHTML).AddSpanTextWithStyle(TempString, TempStyle).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestAddSpanTextWithClass;
var
  TempClass: string;
  TempString: string;
  TestResult: string;
  ExpectedResult: string;
begin
  TempString := 'flooble';
  TempClass := 'main';
  ExpectedResult := HTML(Format('<span class="%s">%s</span>', [TempClass, TempString]));
  TestResult := HTMLWriterFactory(cHTML).AddSpanTextWithClass(TempString, TempClass).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestTHTMLWriter.TestAddSpanTextWithID;
var
  TempID: string;
  TempString: string;
  TestResult: string;
  ExpectedResult: string;
begin
  TempString := 'flooble';
  TempID := 'main';
  ExpectedResult := HTML(Format('<span id="%s">%s</span>', [TempID, TempString]));
  TestResult := HTMLWriterFactory(cHTML).AddSpanTextWithID(TempString, TempID).CloseTag.AsHTML;
  CheckEquals(ExpectedResult, TestResult);
end;

procedure TestIGetHTML.SetUp;
begin
end;

procedure TestIGetHTML.TearDown;
begin
  FIGetHTML := nil;
end;

procedure TestIGetHTML.TestAsHTML;
var
  ReturnValue: string;
begin
  ReturnValue := FIGetHTML.AsHTML;
end;

initialization

// Register any test cases with the test runner
RegisterTest(TestTHTMLWriter.Suite);

end.
